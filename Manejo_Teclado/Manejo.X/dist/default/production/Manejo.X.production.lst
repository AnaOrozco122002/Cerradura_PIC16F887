

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Jun 20 19:45:55 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.20
    35                           ; Generated 12/02/2020 GMT
    36                           ; 
    37                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  000E                     	;# 
   318  000F                     	;# 
   319  0010                     	;# 
   320  0011                     	;# 
   321  0012                     	;# 
   322  0013                     	;# 
   323  0014                     	;# 
   324  0015                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0017                     	;# 
   328  0018                     	;# 
   329  0019                     	;# 
   330  001A                     	;# 
   331  001B                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  001D                     	;# 
   335  001E                     	;# 
   336  001F                     	;# 
   337  0081                     	;# 
   338  0085                     	;# 
   339  0086                     	;# 
   340  0087                     	;# 
   341  0088                     	;# 
   342  0089                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  008F                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0094                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0098                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  0105                     	;# 
   366  0107                     	;# 
   367  0108                     	;# 
   368  0109                     	;# 
   369  010C                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  0185                     	;# 
   375  0187                     	;# 
   376  0188                     	;# 
   377  0189                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380                           
   381                           	psect	idataBANK0
   382  00C3                     __pidataBANK0:
   383                           
   384                           ;initializer for _Password
   385  00C3  34B2               	retlw	178
   386  00C4  3404               	retlw	4
   387                           
   388                           	psect	strings
   389  0003                     __pstrings:
   390  0003                     stringtab:
   391  0003                     __stringtab:
   392                           
   393                           ;	String table - string pointers are 1 byte each
   394  0003  1BFF               	btfsc	btemp+1,7
   395  0004  280D               	ljmp	stringcode
   396  0005  1383               	bcf	3,7
   397  0006  187F               	btfsc	btemp+1,0
   398  0007  1783               	bsf	3,7
   399  0008  0800               	movf	0,w
   400  0009  0A84               	incf	4,f
   401  000A  1903               	skipnz
   402  000B  0AFF               	incf	btemp+1,f
   403  000C  0008               	return
   404  000D                     stringcode:
   405  000D                     stringdir:
   406  000D  3000               	movlw	high stringdir
   407  000E  008A               	movwf	10
   408  000F  0804               	movf	4,w
   409  0010  0A84               	incf	4,f
   410  0011  0782               	addwf	2,f
   411  0012                     __stringbase:
   412  0012  3400               	retlw	0
   413  0013                     __end_of__stringtab:
   414  0013                     _dpowers:
   415  0013  3401               	retlw	1
   416  0014  3400               	retlw	0
   417  0015  340A               	retlw	10
   418  0016  3400               	retlw	0
   419  0017  3464               	retlw	100
   420  0018  3400               	retlw	0
   421  0019  34E8               	retlw	232
   422  001A  3403               	retlw	3
   423  001B  3410               	retlw	16
   424  001C  3427               	retlw	39
   425  001D                     __end_of_dpowers:
   426  0006                     _PORTB	set	6
   427  0007                     _PORTC	set	7
   428  0008                     _PORTD	set	8
   429  0036                     _RB6	set	54
   430  0035                     _RB5	set	53
   431  0034                     _RB4	set	52
   432  003A                     _RC2	set	58
   433  0039                     _RC1	set	57
   434  0038                     _RC0	set	56
   435  0043                     _RD3	set	67
   436  0042                     _RD2	set	66
   437  0047                     _RD7	set	71
   438  0046                     _RD6	set	70
   439  0045                     _RD5	set	69
   440  0044                     _RD4	set	68
   441  0086                     _TRISB	set	134
   442  0087                     _TRISC	set	135
   443  0088                     _TRISD	set	136
   444  001D                     STR_4:
   445  001D  3453               	retlw	83	;'S'
   446  001E  3465               	retlw	101	;'e'
   447  001F  3467               	retlw	103	;'g'
   448  0020  3475               	retlw	117	;'u'
   449  0021  346E               	retlw	110	;'n'
   450  0022  3464               	retlw	100	;'d'
   451  0023  346F               	retlw	111	;'o'
   452  0024  3420               	retlw	32	;' '
   453  0025  3444               	retlw	68	;'D'
   454  0026  3469               	retlw	105	;'i'
   455  0027  3467               	retlw	103	;'g'
   456  0028  3469               	retlw	105	;'i'
   457  0029  3474               	retlw	116	;'t'
   458  002A  346F               	retlw	111	;'o'
   459  002B  3420               	retlw	32	;' '
   460  002C  3425               	retlw	37	;'%'
   461  002D  3469               	retlw	105	;'i'
   462  002E  3400               	retlw	0
   463  002F                     STR_6:
   464  002F  3443               	retlw	67	;'C'
   465  0030  3475               	retlw	117	;'u'
   466  0031  3461               	retlw	97	;'a'
   467  0032  3472               	retlw	114	;'r'
   468  0033  3474               	retlw	116	;'t'
   469  0034  346F               	retlw	111	;'o'
   470  0035  3420               	retlw	32	;' '
   471  0036  3444               	retlw	68	;'D'
   472  0037  3469               	retlw	105	;'i'
   473  0038  3467               	retlw	103	;'g'
   474  0039  3469               	retlw	105	;'i'
   475  003A  3474               	retlw	116	;'t'
   476  003B  346F               	retlw	111	;'o'
   477  003C  3420               	retlw	32	;' '
   478  003D  3425               	retlw	37	;'%'
   479  003E  3469               	retlw	105	;'i'
   480  003F  3400               	retlw	0
   481  0040                     STR_5:
   482  0040  3454               	retlw	84	;'T'
   483  0041  3465               	retlw	101	;'e'
   484  0042  3472               	retlw	114	;'r'
   485  0043  3463               	retlw	99	;'c'
   486  0044  3465               	retlw	101	;'e'
   487  0045  3472               	retlw	114	;'r'
   488  0046  3420               	retlw	32	;' '
   489  0047  3444               	retlw	68	;'D'
   490  0048  3469               	retlw	105	;'i'
   491  0049  3467               	retlw	103	;'g'
   492  004A  3469               	retlw	105	;'i'
   493  004B  3474               	retlw	116	;'t'
   494  004C  346F               	retlw	111	;'o'
   495  004D  3420               	retlw	32	;' '
   496  004E  3425               	retlw	37	;'%'
   497  004F  3469               	retlw	105	;'i'
   498  0050  3400               	retlw	0
   499  0051                     STR_3:
   500  0051  3450               	retlw	80	;'P'
   501  0052  3472               	retlw	114	;'r'
   502  0053  3469               	retlw	105	;'i'
   503  0054  346D               	retlw	109	;'m'
   504  0055  3465               	retlw	101	;'e'
   505  0056  3472               	retlw	114	;'r'
   506  0057  3420               	retlw	32	;' '
   507  0058  3444               	retlw	68	;'D'
   508  0059  3469               	retlw	105	;'i'
   509  005A  3467               	retlw	103	;'g'
   510  005B  3469               	retlw	105	;'i'
   511  005C  3474               	retlw	116	;'t'
   512  005D  346F               	retlw	111	;'o'
   513  005E  3420               	retlw	32	;' '
   514  005F  3425               	retlw	37	;'%'
   515  0060  3469               	retlw	105	;'i'
   516  0061  3400               	retlw	0
   517  0062                     STR_14:
   518  0062  3449               	retlw	73	;'I'
   519  0063  346E               	retlw	110	;'n'
   520  0064  3467               	retlw	103	;'g'
   521  0065  3472               	retlw	114	;'r'
   522  0066  3465               	retlw	101	;'e'
   523  0067  3473               	retlw	115	;'s'
   524  0068  3465               	retlw	101	;'e'
   525  0069  3420               	retlw	32	;' '
   526  006A  3443               	retlw	67	;'C'
   527  006B  346C               	retlw	108	;'l'
   528  006C  3461               	retlw	97	;'a'
   529  006D  3476               	retlw	118	;'v'
   530  006E  3465               	retlw	101	;'e'
   531  006F  3400               	retlw	0
   532  0070                     STR_2:
   533  0070  3445               	retlw	69	;'E'
   534  0071  346C               	retlw	108	;'l'
   535  0072  3465               	retlw	101	;'e'
   536  0073  3463               	retlw	99	;'c'
   537  0074  3474               	retlw	116	;'t'
   538  0075  3472               	retlw	114	;'r'
   539  0076  346F               	retlw	111	;'o'
   540  0077  346E               	retlw	110	;'n'
   541  0078  3469               	retlw	105	;'i'
   542  0079  3463               	retlw	99	;'c'
   543  007A  3461               	retlw	97	;'a'
   544  007B  3400               	retlw	0
   545  007C                     STR_11:
   546  007C  3442               	retlw	66	;'B'
   547  007D  346C               	retlw	108	;'l'
   548  007E  346F               	retlw	111	;'o'
   549  007F  3471               	retlw	113	;'q'
   550  0080  3475               	retlw	117	;'u'
   551  0081  3465               	retlw	101	;'e'
   552  0082  3461               	retlw	97	;'a'
   553  0083  3464               	retlw	100	;'d'
   554  0084  3461               	retlw	97	;'a'
   555  0085  3400               	retlw	0
   556  0086                     STR_1:
   557  0086  3443               	retlw	67	;'C'
   558  0087  3465               	retlw	101	;'e'
   559  0088  3472               	retlw	114	;'r'
   560  0089  3472               	retlw	114	;'r'
   561  008A  3461               	retlw	97	;'a'
   562  008B  3464               	retlw	100	;'d'
   563  008C  3475               	retlw	117	;'u'
   564  008D  3472               	retlw	114	;'r'
   565  008E  3461               	retlw	97	;'a'
   566  008F  3400               	retlw	0
   567  0090                     STR_12:
   568  0090  3454               	retlw	84	;'T'
   569  0091  3472               	retlw	114	;'r'
   570  0092  3479               	retlw	121	;'y'
   571  0093  3420               	retlw	32	;' '
   572  0094  3441               	retlw	65	;'A'
   573  0095  3467               	retlw	103	;'g'
   574  0096  3461               	retlw	97	;'a'
   575  0097  3469               	retlw	105	;'i'
   576  0098  346E               	retlw	110	;'n'
   577  0099  3400               	retlw	0
   578  009A                     STR_10:
   579  009A  3450               	retlw	80	;'P'
   580  009B  3461               	retlw	97	;'a'
   581  009C  3473               	retlw	115	;'s'
   582  009D  3473               	retlw	115	;'s'
   583  009E  3477               	retlw	119	;'w'
   584  009F  346F               	retlw	111	;'o'
   585  00A0  3472               	retlw	114	;'r'
   586  00A1  3464               	retlw	100	;'d'
   587  00A2  3400               	retlw	0
   588  00A3                     STR_15:
   589  00A3  344F               	retlw	79	;'O'
   590  00A4  3474               	retlw	116	;'t'
   591  00A5  3472               	retlw	114	;'r'
   592  00A6  3461               	retlw	97	;'a'
   593  00A7  3420               	retlw	32	;' '
   594  00A8  3456               	retlw	86	;'V'
   595  00A9  3465               	retlw	101	;'e'
   596  00AA  347A               	retlw	122	;'z'
   597  00AB  3400               	retlw	0
   598  00AC                     STR_13:
   599  00AC  3450               	retlw	80	;'P'
   600  00AD  3472               	retlw	114	;'r'
   601  00AE  3465               	retlw	101	;'e'
   602  00AF  3473               	retlw	115	;'s'
   603  00B0  3473               	retlw	115	;'s'
   604  00B1  3420               	retlw	32	;' '
   605  00B2  3423               	retlw	35	;'#'
   606  00B3  3400               	retlw	0
   607  00B4                     STR_8:
   608  00B4  3441               	retlw	65	;'A'
   609  00B5  3462               	retlw	98	;'b'
   610  00B6  3469               	retlw	105	;'i'
   611  00B7  3465               	retlw	101	;'e'
   612  00B8  3472               	retlw	114	;'r'
   613  00B9  3474               	retlw	116	;'t'
   614  00BA  3461               	retlw	97	;'a'
   615  00BB  3400               	retlw	0
   616  00BC                     STR_9:
   617  00BC  3457               	retlw	87	;'W'
   618  00BD  3472               	retlw	114	;'r'
   619  00BE  346F               	retlw	111	;'o'
   620  00BF  346E               	retlw	110	;'n'
   621  00C0  3467               	retlw	103	;'g'
   622  00C1  3400               	retlw	0
   623  0086                     
   624                           	psect	cinit
   625  07E7                     start_initialization:	
   626                           ; #config settings
   627                           
   628  07E7                     __initialization:
   629                           
   630                           ; Initialize objects allocated to BANK0
   631  07E7  120A  118A  20C3  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   632  07EC  00D9               	movwf	__pdataBANK0& (0+127)
   633  07ED  120A  118A  20C4  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   634  07F2  00DA               	movwf	(__pdataBANK0+1)& (0+127)
   635                           
   636                           ; Clear objects allocated to BANK0
   637  07F3  1383               	bcf	3,7	;select IRP bank0
   638  07F4  3045               	movlw	low __pbssBANK0
   639  07F5  0084               	movwf	4
   640  07F6  3059               	movlw	low (__pbssBANK0+20)
   641  07F7  120A  158A  27A8  120A  118A  	fcall	clear_ram0
   642  07FC                     end_of_initialization:	
   643                           ;End of C runtime variable initialization code
   644                           
   645  07FC                     __end_of__initialization:
   646  07FC  0183               	clrf	3
   647  07FD  120A  118A  2C4D   	ljmp	_main	;jump to C main() function
   648                           
   649                           	psect	bssBANK0
   650  0045                     __pbssBANK0:
   651  0045                     _x:
   652  0045                     	ds	2
   653  0047                     _Bandera:
   654  0047                     	ds	2
   655  0049                     _Tecla:
   656  0049                     	ds	2
   657  004B                     _Clave:
   658  004B                     	ds	2
   659  004D                     _XM:
   660  004D                     	ds	2
   661  004F                     _XC:
   662  004F                     	ds	2
   663  0051                     _XD:
   664  0051                     	ds	2
   665  0053                     _X:
   666  0053                     	ds	2
   667  0055                     _True:
   668  0055                     	ds	2
   669  0057                     _Try:
   670  0057                     	ds	2
   671                           
   672                           	psect	dataBANK0
   673  0059                     __pdataBANK0:
   674  0059                     _Password:
   675  0059                     	ds	2
   676                           
   677                           	psect	clrtext
   678  0FA8                     clear_ram0:	
   679                           ;	Called with FSR containing the base address, and
   680                           ;	W with the last address+1
   681                           
   682  0FA8  0064               	clrwdt	;clear the watchdog before getting into this loop
   683  0FA9                     clrloop0:
   684  0FA9  0180               	clrf	0	;clear RAM location pointed to by FSR
   685  0FAA  0A84               	incf	4,f	;increment pointer
   686  0FAB  0604               	xorwf	4,w	;XOR with final address
   687  0FAC  1903               	btfsc	3,2	;have we reached the end yet?
   688  0FAD  3400               	retlw	0	;all done for this memory range, return
   689  0FAE  0604               	xorwf	4,w	;XOR again to restore value
   690  0FAF  2FA9               	goto	clrloop0	;do the next byte
   691                           
   692                           	psect	cstackCOMMON
   693  0070                     __pcstackCOMMON:
   694  0070                     ?_Leer_tecla:
   695  0070                     ??_Leer_tecla:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?_Lcd_Port:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ??_Lcd_Port:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_Lcd_Cmd:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ?_Lcd_Clear:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?_Lcd_Init:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     ?_Lcd_Write_Char:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ?_Prender_Verde:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ??_Prender_Verde:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ?_Apagar_Verde:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0070                     ??_Apagar_Verde:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0070                     ?_Prender_Rojo:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0070                     ??_Prender_Rojo:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0070                     ?_Apagar_Rojo:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0070                     ??_Apagar_Rojo:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0070                     ?_Sonar:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0070                     ??_Sonar:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0070                     ?_Bloqueo:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0070                     ??_Bloqueo:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0070                     ?_main:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  0070                     ?___wmul:	
   756                           ; 2 bytes @ 0x0
   757                           
   758  0070                     ?___lwdiv:	
   759                           ; 2 bytes @ 0x0
   760                           
   761  0070                     Lcd_Port@a:	
   762                           ; 2 bytes @ 0x0
   763                           
   764  0070                     ___wmul@multiplier:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  0070                     ___lwdiv@divisor:	
   768                           ; 2 bytes @ 0x0
   769                           
   770                           
   771                           ; 2 bytes @ 0x0
   772  0070                     	ds	1
   773  0071                     ??_Lcd_Cmd:
   774  0071                     ??_Lcd_Write_Char:	
   775                           ; 1 bytes @ 0x1
   776                           
   777                           
   778                           ; 1 bytes @ 0x1
   779  0071                     	ds	1
   780  0072                     Lcd_Write_Char@temp:
   781  0072                     ___wmul@multiplicand:	
   782                           ; 1 bytes @ 0x2
   783                           
   784  0072                     ___lwdiv@dividend:	
   785                           ; 2 bytes @ 0x2
   786                           
   787                           
   788                           ; 2 bytes @ 0x2
   789  0072                     	ds	1
   790  0073                     Lcd_Cmd@a:
   791  0073                     Lcd_Write_Char@y:	
   792                           ; 1 bytes @ 0x3
   793                           
   794                           
   795                           ; 1 bytes @ 0x3
   796  0073                     	ds	1
   797  0074                     ??_Lcd_Clear:
   798  0074                     ?_Lcd_Set_Cursor:	
   799                           ; 1 bytes @ 0x4
   800                           
   801  0074                     ??_Lcd_Init:	
   802                           ; 1 bytes @ 0x4
   803                           
   804  0074                     ??___wmul:	
   805                           ; 1 bytes @ 0x4
   806                           
   807  0074                     ??___lwdiv:	
   808                           ; 1 bytes @ 0x4
   809                           
   810  0074                     Lcd_Set_Cursor@b:	
   811                           ; 1 bytes @ 0x4
   812                           
   813  0074                     Lcd_Write_Char@a:	
   814                           ; 1 bytes @ 0x4
   815                           
   816  0074                     ___wmul@product:	
   817                           ; 1 bytes @ 0x4
   818                           
   819                           
   820                           ; 2 bytes @ 0x4
   821  0074                     	ds	1
   822  0075                     ??_Lcd_Set_Cursor:
   823  0075                     ?_Lcd_Write_String:	
   824                           ; 1 bytes @ 0x5
   825                           
   826  0075                     Lcd_Write_String@a:	
   827                           ; 1 bytes @ 0x5
   828                           
   829  0075                     ___lwdiv@quotient:	
   830                           ; 2 bytes @ 0x5
   831                           
   832                           
   833                           ; 2 bytes @ 0x5
   834  0075                     	ds	2
   835  0077                     ??_Lcd_Write_String:
   836  0077                     Lcd_Set_Cursor@a:	
   837                           ; 1 bytes @ 0x7
   838                           
   839  0077                     ___lwdiv@counter:	
   840                           ; 1 bytes @ 0x7
   841                           
   842                           
   843                           ; 1 bytes @ 0x7
   844  0077                     	ds	1
   845  0078                     ?___lwmod:
   846  0078                     Lcd_Set_Cursor@z:	
   847                           ; 2 bytes @ 0x8
   848                           
   849  0078                     ___lwmod@divisor:	
   850                           ; 1 bytes @ 0x8
   851                           
   852                           
   853                           ; 2 bytes @ 0x8
   854  0078                     	ds	1
   855  0079                     Lcd_Set_Cursor@y:
   856                           
   857                           ; 1 bytes @ 0x9
   858  0079                     	ds	1
   859  007A                     Lcd_Set_Cursor@temp:
   860  007A                     Lcd_Write_String@i:	
   861                           ; 1 bytes @ 0xA
   862                           
   863  007A                     ___lwmod@dividend:	
   864                           ; 2 bytes @ 0xA
   865                           
   866                           
   867                           ; 2 bytes @ 0xA
   868  007A                     	ds	2
   869  007C                     ??___lwmod:
   870                           
   871                           ; 1 bytes @ 0xC
   872  007C                     	ds	1
   873  007D                     ___lwmod@counter:
   874                           
   875                           ; 1 bytes @ 0xD
   876  007D                     	ds	1
   877                           
   878                           	psect	cstackBANK0
   879  0020                     __pcstackBANK0:
   880  0020                     ?_sprintf:
   881  0020                     sprintf@f:	
   882                           ; 2 bytes @ 0x0
   883                           
   884                           
   885                           ; 1 bytes @ 0x0
   886  0020                     	ds	3
   887  0023                     ??_sprintf:
   888                           
   889                           ; 1 bytes @ 0x3
   890  0023                     	ds	3
   891  0026                     sprintf@ap:
   892                           
   893                           ; 1 bytes @ 0x6
   894  0026                     	ds	1
   895  0027                     sprintf@flag:
   896                           
   897                           ; 1 bytes @ 0x7
   898  0027                     	ds	1
   899  0028                     sprintf@prec:
   900                           
   901                           ; 1 bytes @ 0x8
   902  0028                     	ds	1
   903  0029                     sprintf@val:
   904                           
   905                           ; 2 bytes @ 0x9
   906  0029                     	ds	2
   907  002B                     sprintf@sp:
   908                           
   909                           ; 1 bytes @ 0xB
   910  002B                     	ds	1
   911  002C                     sprintf@c:
   912                           
   913                           ; 1 bytes @ 0xC
   914  002C                     	ds	1
   915  002D                     ??_main:
   916                           
   917                           ; 1 bytes @ 0xD
   918  002D                     	ds	4
   919  0031                     main@Cadena:
   920                           
   921                           ; 20 bytes @ 0x11
   922  0031                     	ds	20
   923                           
   924                           	psect	maintext
   925  044D                     __pmaintext:	
   926 ;;
   927 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   928 ;;
   929 ;; *************** function _main *****************
   930 ;; Defined at:
   931 ;;		line 46 in file "main.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;  Cadena         20   17[BANK0 ] unsigned char [20]
   936 ;; Return value:  Size  Location     Type
   937 ;;                  2  129[None  ] int 
   938 ;; Registers used:
   939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : B00/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   945 ;;      Params:         0       0       0       0       0
   946 ;;      Locals:         0      20       0       0       0
   947 ;;      Temps:          0       4       0       0       0
   948 ;;      Totals:         0      24       0       0       0
   949 ;;Total ram usage:       24 bytes
   950 ;; Hardware stack levels required when called: 3
   951 ;; This function calls:
   952 ;;		_Apagar_Rojo
   953 ;;		_Apagar_Verde
   954 ;;		_Bloqueo
   955 ;;		_Lcd_Clear
   956 ;;		_Lcd_Init
   957 ;;		_Lcd_Set_Cursor
   958 ;;		_Lcd_Write_String
   959 ;;		_Leer_tecla
   960 ;;		_Prender_Rojo
   961 ;;		_Prender_Verde
   962 ;;		_Sonar
   963 ;;		___wmul
   964 ;;		_sprintf
   965 ;; This function is called by:
   966 ;;		Startup code after reset
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970  044D                     _main:	
   971                           ;psect for function _main
   972                           
   973  044D                     l1538:	
   974                           ;incstack = 0
   975                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   976                           
   977                           
   978                           ;main.c: 48:   char Cadena[20];;main.c: 49:   TRISD = 0x00;
   979  044D  1683               	bsf	3,5	;RP0=1, select bank1
   980  044E  1303               	bcf	3,6	;RP1=0, select bank1
   981  044F  0188               	clrf	8	;volatile
   982                           
   983                           ;main.c: 50:   TRISC = 0x00;
   984  0450  0187               	clrf	7	;volatile
   985  0451                     l1540:
   986                           
   987                           ;main.c: 51:   TRISB = 0xF0;
   988  0451  30F0               	movlw	240
   989  0452  0086               	movwf	6	;volatile
   990  0453                     l1542:
   991                           
   992                           ;main.c: 52:   PORTD = 0;
   993  0453  1283               	bcf	3,5	;RP0=0, select bank0
   994  0454  1303               	bcf	3,6	;RP1=0, select bank0
   995  0455  0188               	clrf	8	;volatile
   996  0456                     l1544:
   997                           
   998                           ;main.c: 53:   PORTC = 0;
   999  0456  0187               	clrf	7	;volatile
  1000  0457                     l1546:
  1001                           
  1002                           ;main.c: 54:   PORTB = 0;
  1003  0457  0186               	clrf	6	;volatile
  1004  0458                     l1548:
  1005                           
  1006                           ;main.c: 56:   Lcd_Init();
  1007  0458  120A  118A  2266  120A  118A  	fcall	_Lcd_Init
  1008  045D                     l1550:
  1009                           
  1010                           ;main.c: 57:   Lcd_Clear();
  1011  045D  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1012  0462                     l1552:
  1013                           
  1014                           ;main.c: 58:   Lcd_Set_Cursor(1,4);
  1015  0462  3004               	movlw	4
  1016  0463  1283               	bcf	3,5	;RP0=0, select bank0
  1017  0464  1303               	bcf	3,6	;RP1=0, select bank0
  1018  0465  00AD               	movwf	??_main
  1019  0466  082D               	movf	??_main,w
  1020  0467  00F4               	movwf	Lcd_Set_Cursor@b
  1021  0468  3001               	movlw	1
  1022  0469  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1023  046E                     l1554:
  1024                           
  1025                           ;main.c: 59:   Lcd_Write_String("Cerradura");
  1026  046E  3074               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1027  046F  00F5               	movwf	Lcd_Write_String@a
  1028  0470  3080               	movlw	128
  1029  0471  00F6               	movwf	Lcd_Write_String@a+1
  1030  0472  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1031  0477                     l1556:
  1032                           
  1033                           ;main.c: 60:   Lcd_Set_Cursor(2,3);
  1034  0477  3003               	movlw	3
  1035  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1037  047A  00AD               	movwf	??_main
  1038  047B  082D               	movf	??_main,w
  1039  047C  00F4               	movwf	Lcd_Set_Cursor@b
  1040  047D  3002               	movlw	2
  1041  047E  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1042  0483                     l1558:
  1043                           
  1044                           ;main.c: 61:   Lcd_Write_String("Electronica");
  1045  0483  305E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1046  0484  00F5               	movwf	Lcd_Write_String@a
  1047  0485  3080               	movlw	128
  1048  0486  00F6               	movwf	Lcd_Write_String@a+1
  1049  0487  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1050  048C                     l1560:
  1051                           
  1052                           ;main.c: 62:   Prender_Rojo();
  1053  048C  120A  158A  27A4  120A  118A  	fcall	_Prender_Rojo
  1054  0491                     l1562:
  1055                           
  1056                           ;main.c: 63:   _delay((unsigned long)((1000)*(4000000/4000.0)));
  1057  0491  3006               	movlw	6
  1058  0492  1283               	bcf	3,5	;RP0=0, select bank0
  1059  0493  1303               	bcf	3,6	;RP1=0, select bank0
  1060  0494  00AF               	movwf	??_main+2
  1061  0495  3013               	movlw	19
  1062  0496  00AE               	movwf	??_main+1
  1063  0497  30AD               	movlw	173
  1064  0498  00AD               	movwf	??_main
  1065  0499                     u1237:
  1066  0499  0BAD               	decfsz	??_main,f
  1067  049A  2C99               	goto	u1237
  1068  049B  0BAE               	decfsz	??_main+1,f
  1069  049C  2C99               	goto	u1237
  1070  049D  0BAF               	decfsz	??_main+2,f
  1071  049E  2C99               	goto	u1237
  1072                           
  1073                           ;main.c: 66:   while((Try < 3) && (True == 0) ){
  1074  049F  2FCD               	goto	l1718
  1075  04A0                     l1564:
  1076                           
  1077                           ;main.c: 68:     Apagar_Verde();
  1078  04A0  120A  158A  27A0  120A  118A  	fcall	_Apagar_Verde
  1079  04A5                     l1566:
  1080                           
  1081                           ;main.c: 70:     Tecla = Leer_tecla();
  1082  04A5  120A  118A  22C3  120A  118A  	fcall	_Leer_tecla
  1083  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  1084  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  1085  04AC  00AD               	movwf	??_main
  1086  04AD  01AE               	clrf	??_main+1
  1087  04AE  082D               	movf	??_main,w
  1088  04AF  00C9               	movwf	_Tecla
  1089  04B0  082E               	movf	??_main+1,w
  1090  04B1  00CA               	movwf	_Tecla+1
  1091  04B2                     l1568:
  1092                           
  1093                           ;main.c: 71:     if((Tecla != 100) && (Tecla != 42) && (Tecla != 35)){
  1094  04B2  3064               	movlw	100
  1095  04B3  0649               	xorwf	_Tecla,w
  1096  04B4  044A               	iorwf	_Tecla+1,w
  1097  04B5  1903               	btfsc	3,2
  1098  04B6  2CB8               	goto	u1101
  1099  04B7  2CB9               	goto	u1100
  1100  04B8                     u1101:
  1101  04B8  2E46               	goto	l1644
  1102  04B9                     u1100:
  1103  04B9                     l1570:
  1104  04B9  302A               	movlw	42
  1105  04BA  0649               	xorwf	_Tecla,w
  1106  04BB  044A               	iorwf	_Tecla+1,w
  1107  04BC  1903               	btfsc	3,2
  1108  04BD  2CBF               	goto	u1111
  1109  04BE  2CC0               	goto	u1110
  1110  04BF                     u1111:
  1111  04BF  2E46               	goto	l1644
  1112  04C0                     u1110:
  1113  04C0                     l1572:
  1114  04C0  3023               	movlw	35
  1115  04C1  0649               	xorwf	_Tecla,w
  1116  04C2  044A               	iorwf	_Tecla+1,w
  1117  04C3  1903               	btfsc	3,2
  1118  04C4  2CC6               	goto	u1121
  1119  04C5  2CC7               	goto	u1120
  1120  04C6                     u1121:
  1121  04C6  2E46               	goto	l1644
  1122  04C7                     u1120:
  1123  04C7                     l1574:
  1124                           
  1125                           ;main.c: 72:         if(Bandera == 0){
  1126  04C7  0847               	movf	_Bandera,w
  1127  04C8  0448               	iorwf	_Bandera+1,w
  1128  04C9  1D03               	btfss	3,2
  1129  04CA  2CCC               	goto	u1131
  1130  04CB  2CCD               	goto	u1130
  1131  04CC                     u1131:
  1132  04CC  2D30               	goto	l1592
  1133  04CD                     u1130:
  1134  04CD                     l1576:
  1135                           
  1136                           ;main.c: 73:           Sonar();
  1137  04CD  120A  158A  27B0  120A  118A  	fcall	_Sonar
  1138  04D2                     l1578:
  1139                           
  1140                           ;main.c: 74:           _delay((unsigned long)((500)*(4000000/4000.0)));
  1141  04D2  3003               	movlw	3
  1142  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  1143  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  1144  04D5  00AF               	movwf	??_main+2
  1145  04D6  308A               	movlw	138
  1146  04D7  00AE               	movwf	??_main+1
  1147  04D8  3055               	movlw	85
  1148  04D9  00AD               	movwf	??_main
  1149  04DA                     u1247:
  1150  04DA  0BAD               	decfsz	??_main,f
  1151  04DB  2CDA               	goto	u1247
  1152  04DC  0BAE               	decfsz	??_main+1,f
  1153  04DD  2CDA               	goto	u1247
  1154  04DE  0BAF               	decfsz	??_main+2,f
  1155  04DF  2CDA               	goto	u1247
  1156  04E0                     l1580:
  1157                           
  1158                           ;main.c: 75:           sprintf(Cadena,"Primer Digito %i",Tecla);
  1159  04E0  303F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1160  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1161  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  1162  04E3  00AD               	movwf	??_main
  1163  04E4  082D               	movf	??_main,w
  1164  04E5  00A0               	movwf	sprintf@f
  1165  04E6  084A               	movf	_Tecla+1,w
  1166  04E7  00A2               	movwf	?_sprintf+2
  1167  04E8  0849               	movf	_Tecla,w
  1168  04E9  00A1               	movwf	?_sprintf+1
  1169  04EA  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1170  04EB  120A  118A  2365  120A  118A  	fcall	_sprintf
  1171  04F0                     l1582:
  1172                           
  1173                           ;main.c: 76:           Lcd_Clear();
  1174  04F0  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1175  04F5                     l1584:
  1176                           
  1177                           ;main.c: 77:           Lcd_Set_Cursor(1,1);
  1178  04F5  01F4               	clrf	Lcd_Set_Cursor@b
  1179  04F6  0AF4               	incf	Lcd_Set_Cursor@b,f
  1180  04F7  3001               	movlw	1
  1181  04F8  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1182  04FD                     l1586:
  1183                           
  1184                           ;main.c: 78:           Lcd_Write_String(Cadena);
  1185  04FD  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1186  04FE  00F5               	movwf	Lcd_Write_String@a
  1187  04FF  3000               	movlw	0
  1188  0500  00F6               	movwf	Lcd_Write_String@a+1
  1189  0501  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1190  0506                     l1588:
  1191                           
  1192                           ;main.c: 79:           _delay((unsigned long)((500)*(4000000/4000.0)));
  1193  0506  3003               	movlw	3
  1194  0507  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0508  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0509  00AF               	movwf	??_main+2
  1197  050A  308A               	movlw	138
  1198  050B  00AE               	movwf	??_main+1
  1199  050C  3055               	movlw	85
  1200  050D  00AD               	movwf	??_main
  1201  050E                     u1257:
  1202  050E  0BAD               	decfsz	??_main,f
  1203  050F  2D0E               	goto	u1257
  1204  0510  0BAE               	decfsz	??_main+1,f
  1205  0511  2D0E               	goto	u1257
  1206  0512  0BAF               	decfsz	??_main+2,f
  1207  0513  2D0E               	goto	u1257
  1208                           
  1209                           ;main.c: 80:           XM = Tecla * 1000;
  1210  0514  1283               	bcf	3,5	;RP0=0, select bank0
  1211  0515  1303               	bcf	3,6	;RP1=0, select bank0
  1212  0516  084A               	movf	_Tecla+1,w
  1213  0517  00F1               	movwf	___wmul@multiplier+1
  1214  0518  0849               	movf	_Tecla,w
  1215  0519  00F0               	movwf	___wmul@multiplier
  1216  051A  30E8               	movlw	232
  1217  051B  00F2               	movwf	___wmul@multiplicand
  1218  051C  3003               	movlw	3
  1219  051D  00F3               	movwf	___wmul@multiplicand+1
  1220  051E  120A  118A  20F8  120A  118A  	fcall	___wmul
  1221  0523  0871               	movf	?___wmul+1,w
  1222  0524  1283               	bcf	3,5	;RP0=0, select bank0
  1223  0525  1303               	bcf	3,6	;RP1=0, select bank0
  1224  0526  00CE               	movwf	_XM+1
  1225  0527  0870               	movf	?___wmul,w
  1226  0528  00CD               	movwf	_XM
  1227  0529                     l1590:
  1228                           
  1229                           ;main.c: 81:           Bandera ++;
  1230  0529  3001               	movlw	1
  1231  052A  07C7               	addwf	_Bandera,f
  1232  052B  1803               	skipnc
  1233  052C  0AC8               	incf	_Bandera+1,f
  1234  052D  3000               	movlw	0
  1235  052E  07C8               	addwf	_Bandera+1,f
  1236                           
  1237                           ;main.c: 82:         }
  1238  052F  2E2E               	goto	l1642
  1239  0530                     l1592:
  1240  0530  0347               	decf	_Bandera,w
  1241  0531  0448               	iorwf	_Bandera+1,w
  1242  0532  1D03               	btfss	3,2
  1243  0533  2D35               	goto	u1141
  1244  0534  2D36               	goto	u1140
  1245  0535                     u1141:
  1246  0535  2D8B               	goto	l1608
  1247  0536                     u1140:
  1248  0536                     l1594:
  1249                           
  1250                           ;main.c: 84:             Sonar();
  1251  0536  120A  158A  27B0  120A  118A  	fcall	_Sonar
  1252  053B                     l1596:
  1253                           
  1254                           ;main.c: 85:             sprintf(Cadena,"Segundo Digito %i",Tecla);
  1255  053B  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1256  053C  1283               	bcf	3,5	;RP0=0, select bank0
  1257  053D  1303               	bcf	3,6	;RP1=0, select bank0
  1258  053E  00AD               	movwf	??_main
  1259  053F  082D               	movf	??_main,w
  1260  0540  00A0               	movwf	sprintf@f
  1261  0541  084A               	movf	_Tecla+1,w
  1262  0542  00A2               	movwf	?_sprintf+2
  1263  0543  0849               	movf	_Tecla,w
  1264  0544  00A1               	movwf	?_sprintf+1
  1265  0545  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1266  0546  120A  118A  2365  120A  118A  	fcall	_sprintf
  1267  054B                     l1598:
  1268                           
  1269                           ;main.c: 86:             Lcd_Clear();
  1270  054B  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1271  0550                     l1600:
  1272                           
  1273                           ;main.c: 87:             Lcd_Set_Cursor(1,1);
  1274  0550  01F4               	clrf	Lcd_Set_Cursor@b
  1275  0551  0AF4               	incf	Lcd_Set_Cursor@b,f
  1276  0552  3001               	movlw	1
  1277  0553  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1278  0558                     l1602:
  1279                           
  1280                           ;main.c: 88:             Lcd_Write_String(Cadena);
  1281  0558  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1282  0559  00F5               	movwf	Lcd_Write_String@a
  1283  055A  3000               	movlw	0
  1284  055B  00F6               	movwf	Lcd_Write_String@a+1
  1285  055C  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1286  0561                     l1604:
  1287                           
  1288                           ;main.c: 89:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1289  0561  3003               	movlw	3
  1290  0562  1283               	bcf	3,5	;RP0=0, select bank0
  1291  0563  1303               	bcf	3,6	;RP1=0, select bank0
  1292  0564  00AF               	movwf	??_main+2
  1293  0565  308A               	movlw	138
  1294  0566  00AE               	movwf	??_main+1
  1295  0567  3055               	movlw	85
  1296  0568  00AD               	movwf	??_main
  1297  0569                     u1267:
  1298  0569  0BAD               	decfsz	??_main,f
  1299  056A  2D69               	goto	u1267
  1300  056B  0BAE               	decfsz	??_main+1,f
  1301  056C  2D69               	goto	u1267
  1302  056D  0BAF               	decfsz	??_main+2,f
  1303  056E  2D69               	goto	u1267
  1304  056F                     l1606:
  1305                           
  1306                           ;main.c: 90:             XC = Tecla * 100;
  1307  056F  1283               	bcf	3,5	;RP0=0, select bank0
  1308  0570  1303               	bcf	3,6	;RP1=0, select bank0
  1309  0571  084A               	movf	_Tecla+1,w
  1310  0572  00F1               	movwf	___wmul@multiplier+1
  1311  0573  0849               	movf	_Tecla,w
  1312  0574  00F0               	movwf	___wmul@multiplier
  1313  0575  3064               	movlw	100
  1314  0576  00F2               	movwf	___wmul@multiplicand
  1315  0577  3000               	movlw	0
  1316  0578  00F3               	movwf	___wmul@multiplicand+1
  1317  0579  120A  118A  20F8  120A  118A  	fcall	___wmul
  1318  057E  0871               	movf	?___wmul+1,w
  1319  057F  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0580  1303               	bcf	3,6	;RP1=0, select bank0
  1321  0581  00D0               	movwf	_XC+1
  1322  0582  0870               	movf	?___wmul,w
  1323  0583  00CF               	movwf	_XC
  1324                           
  1325                           ;main.c: 91:             Bandera ++;
  1326  0584  3001               	movlw	1
  1327  0585  07C7               	addwf	_Bandera,f
  1328  0586  1803               	skipnc
  1329  0587  0AC8               	incf	_Bandera+1,f
  1330  0588  3000               	movlw	0
  1331  0589  07C8               	addwf	_Bandera+1,f
  1332                           
  1333                           ;main.c: 92:         }
  1334  058A  2E2E               	goto	l1642
  1335  058B                     l1608:
  1336  058B  3002               	movlw	2
  1337  058C  0647               	xorwf	_Bandera,w
  1338  058D  0448               	iorwf	_Bandera+1,w
  1339  058E  1D03               	btfss	3,2
  1340  058F  2D91               	goto	u1151
  1341  0590  2D92               	goto	u1150
  1342  0591                     u1151:
  1343  0591  2DE7               	goto	l1624
  1344  0592                     u1150:
  1345  0592                     l1610:
  1346                           
  1347                           ;main.c: 94:             Sonar();
  1348  0592  120A  158A  27B0  120A  118A  	fcall	_Sonar
  1349  0597                     l1612:
  1350                           
  1351                           ;main.c: 95:             sprintf(Cadena,"Tercer Digito %i",Tecla);
  1352  0597  302E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1353  0598  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0599  1303               	bcf	3,6	;RP1=0, select bank0
  1355  059A  00AD               	movwf	??_main
  1356  059B  082D               	movf	??_main,w
  1357  059C  00A0               	movwf	sprintf@f
  1358  059D  084A               	movf	_Tecla+1,w
  1359  059E  00A2               	movwf	?_sprintf+2
  1360  059F  0849               	movf	_Tecla,w
  1361  05A0  00A1               	movwf	?_sprintf+1
  1362  05A1  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1363  05A2  120A  118A  2365  120A  118A  	fcall	_sprintf
  1364  05A7                     l1614:
  1365                           
  1366                           ;main.c: 96:             Lcd_Clear();
  1367  05A7  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1368  05AC                     l1616:
  1369                           
  1370                           ;main.c: 97:             Lcd_Set_Cursor(1,1);
  1371  05AC  01F4               	clrf	Lcd_Set_Cursor@b
  1372  05AD  0AF4               	incf	Lcd_Set_Cursor@b,f
  1373  05AE  3001               	movlw	1
  1374  05AF  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1375  05B4                     l1618:
  1376                           
  1377                           ;main.c: 98:             Lcd_Write_String(Cadena);
  1378  05B4  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1379  05B5  00F5               	movwf	Lcd_Write_String@a
  1380  05B6  3000               	movlw	0
  1381  05B7  00F6               	movwf	Lcd_Write_String@a+1
  1382  05B8  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1383  05BD                     l1620:
  1384                           
  1385                           ;main.c: 99:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1386  05BD  3003               	movlw	3
  1387  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  1388  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  1389  05C0  00AF               	movwf	??_main+2
  1390  05C1  308A               	movlw	138
  1391  05C2  00AE               	movwf	??_main+1
  1392  05C3  3055               	movlw	85
  1393  05C4  00AD               	movwf	??_main
  1394  05C5                     u1277:
  1395  05C5  0BAD               	decfsz	??_main,f
  1396  05C6  2DC5               	goto	u1277
  1397  05C7  0BAE               	decfsz	??_main+1,f
  1398  05C8  2DC5               	goto	u1277
  1399  05C9  0BAF               	decfsz	??_main+2,f
  1400  05CA  2DC5               	goto	u1277
  1401  05CB                     l1622:
  1402                           
  1403                           ;main.c: 100:             XD = Tecla * 10;
  1404  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  1405  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  1406  05CD  084A               	movf	_Tecla+1,w
  1407  05CE  00F1               	movwf	___wmul@multiplier+1
  1408  05CF  0849               	movf	_Tecla,w
  1409  05D0  00F0               	movwf	___wmul@multiplier
  1410  05D1  300A               	movlw	10
  1411  05D2  00F2               	movwf	___wmul@multiplicand
  1412  05D3  3000               	movlw	0
  1413  05D4  00F3               	movwf	___wmul@multiplicand+1
  1414  05D5  120A  118A  20F8  120A  118A  	fcall	___wmul
  1415  05DA  0871               	movf	?___wmul+1,w
  1416  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  1417  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  1418  05DD  00D2               	movwf	_XD+1
  1419  05DE  0870               	movf	?___wmul,w
  1420  05DF  00D1               	movwf	_XD
  1421                           
  1422                           ;main.c: 101:             Bandera ++;
  1423  05E0  3001               	movlw	1
  1424  05E1  07C7               	addwf	_Bandera,f
  1425  05E2  1803               	skipnc
  1426  05E3  0AC8               	incf	_Bandera+1,f
  1427  05E4  3000               	movlw	0
  1428  05E5  07C8               	addwf	_Bandera+1,f
  1429                           
  1430                           ;main.c: 102:         }
  1431  05E6  2E2E               	goto	l1642
  1432  05E7                     l1624:
  1433  05E7  3003               	movlw	3
  1434  05E8  0647               	xorwf	_Bandera,w
  1435  05E9  0448               	iorwf	_Bandera+1,w
  1436  05EA  1D03               	btfss	3,2
  1437  05EB  2DED               	goto	u1161
  1438  05EC  2DEE               	goto	u1160
  1439  05ED                     u1161:
  1440  05ED  2E2E               	goto	l136
  1441  05EE                     u1160:
  1442  05EE                     l1626:
  1443                           
  1444                           ;main.c: 104:             Sonar();
  1445  05EE  120A  158A  27B0  120A  118A  	fcall	_Sonar
  1446  05F3                     l1628:
  1447                           
  1448                           ;main.c: 105:             sprintf(Cadena,"Cuarto Digito %i",Tecla);
  1449  05F3  301D               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1450  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  1451  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  1452  05F6  00AD               	movwf	??_main
  1453  05F7  082D               	movf	??_main,w
  1454  05F8  00A0               	movwf	sprintf@f
  1455  05F9  084A               	movf	_Tecla+1,w
  1456  05FA  00A2               	movwf	?_sprintf+2
  1457  05FB  0849               	movf	_Tecla,w
  1458  05FC  00A1               	movwf	?_sprintf+1
  1459  05FD  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1460  05FE  120A  118A  2365  120A  118A  	fcall	_sprintf
  1461  0603                     l1630:
  1462                           
  1463                           ;main.c: 106:             Lcd_Clear();
  1464  0603  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1465  0608                     l1632:
  1466                           
  1467                           ;main.c: 107:             Lcd_Set_Cursor(1,1);
  1468  0608  01F4               	clrf	Lcd_Set_Cursor@b
  1469  0609  0AF4               	incf	Lcd_Set_Cursor@b,f
  1470  060A  3001               	movlw	1
  1471  060B  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1472  0610                     l1634:
  1473                           
  1474                           ;main.c: 108:             Lcd_Write_String(Cadena);
  1475  0610  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1476  0611  00F5               	movwf	Lcd_Write_String@a
  1477  0612  3000               	movlw	0
  1478  0613  00F6               	movwf	Lcd_Write_String@a+1
  1479  0614  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1480  0619                     l1636:
  1481                           
  1482                           ;main.c: 109:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1483  0619  3003               	movlw	3
  1484  061A  1283               	bcf	3,5	;RP0=0, select bank0
  1485  061B  1303               	bcf	3,6	;RP1=0, select bank0
  1486  061C  00AF               	movwf	??_main+2
  1487  061D  308A               	movlw	138
  1488  061E  00AE               	movwf	??_main+1
  1489  061F  3055               	movlw	85
  1490  0620  00AD               	movwf	??_main
  1491  0621                     u1287:
  1492  0621  0BAD               	decfsz	??_main,f
  1493  0622  2E21               	goto	u1287
  1494  0623  0BAE               	decfsz	??_main+1,f
  1495  0624  2E21               	goto	u1287
  1496  0625  0BAF               	decfsz	??_main+2,f
  1497  0626  2E21               	goto	u1287
  1498  0627                     l1638:
  1499                           
  1500                           ;main.c: 110:             X = Tecla;
  1501  0627  1283               	bcf	3,5	;RP0=0, select bank0
  1502  0628  1303               	bcf	3,6	;RP1=0, select bank0
  1503  0629  084A               	movf	_Tecla+1,w
  1504  062A  00D4               	movwf	_X+1
  1505  062B  0849               	movf	_Tecla,w
  1506  062C  00D3               	movwf	_X
  1507  062D  2D29               	goto	l1590
  1508  062E                     l136:
  1509  062E                     l1642:
  1510                           
  1511                           ;main.c: 115:        Clave = X + XD + XC + XM;
  1512  062E  0851               	movf	_XD,w
  1513  062F  0753               	addwf	_X,w
  1514  0630  00AD               	movwf	??_main
  1515  0631  0852               	movf	_XD+1,w
  1516  0632  1803               	skipnc
  1517  0633  0A52               	incf	_XD+1,w
  1518  0634  0754               	addwf	_X+1,w
  1519  0635  00AE               	movwf	??_main+1
  1520  0636  084F               	movf	_XC,w
  1521  0637  072D               	addwf	??_main,w
  1522  0638  00AF               	movwf	??_main+2
  1523  0639  0850               	movf	_XC+1,w
  1524  063A  1803               	skipnc
  1525  063B  0A50               	incf	_XC+1,w
  1526  063C  072E               	addwf	??_main+1,w
  1527  063D  00B0               	movwf	??_main+3
  1528  063E  084D               	movf	_XM,w
  1529  063F  072F               	addwf	??_main+2,w
  1530  0640  00CB               	movwf	_Clave
  1531  0641  084E               	movf	_XM+1,w
  1532  0642  1803               	skipnc
  1533  0643  0A4E               	incf	_XM+1,w
  1534  0644  0730               	addwf	??_main+3,w
  1535  0645  00CC               	movwf	_Clave+1
  1536  0646                     l1644:
  1537                           
  1538                           ;main.c: 117:     if(Clave == Password){
  1539  0646  30B2               	movlw	178
  1540  0647  064B               	xorwf	_Clave,w
  1541  0648  3004               	movlw	4
  1542  0649  1903               	skipnz
  1543  064A  064C               	xorwf	_Clave+1,w
  1544  064B  1D03               	btfss	3,2
  1545  064C  2E4E               	goto	u1171
  1546  064D  2E4F               	goto	u1170
  1547  064E                     u1171:
  1548  064E  2E9C               	goto	l1664
  1549  064F                     u1170:
  1550  064F                     l1646:
  1551                           
  1552                           ;main.c: 118:         True = 1;
  1553  064F  3001               	movlw	1
  1554  0650  00D5               	movwf	_True
  1555  0651  3000               	movlw	0
  1556  0652  00D6               	movwf	_True+1
  1557  0653                     l1648:
  1558                           
  1559                           ;main.c: 119:         Apagar_Rojo();
  1560  0653  120A  158A  279C  120A  118A  	fcall	_Apagar_Rojo
  1561  0658                     l1650:
  1562                           
  1563                           ;main.c: 120:         Prender_Verde();
  1564  0658  120A  118A  20C5  120A  118A  	fcall	_Prender_Verde
  1565  065D                     l1652:
  1566                           
  1567                           ;main.c: 121:         Lcd_Clear();
  1568  065D  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1569  0662                     l1654:
  1570                           
  1571                           ;main.c: 122:         Lcd_Set_Cursor(1,4);
  1572  0662  3004               	movlw	4
  1573  0663  1283               	bcf	3,5	;RP0=0, select bank0
  1574  0664  1303               	bcf	3,6	;RP1=0, select bank0
  1575  0665  00AD               	movwf	??_main
  1576  0666  082D               	movf	??_main,w
  1577  0667  00F4               	movwf	Lcd_Set_Cursor@b
  1578  0668  3001               	movlw	1
  1579  0669  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1580  066E                     l1656:
  1581                           
  1582                           ;main.c: 123:         Lcd_Write_String("Cerradura");
  1583  066E  3074               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1584  066F  00F5               	movwf	Lcd_Write_String@a
  1585  0670  3080               	movlw	128
  1586  0671  00F6               	movwf	Lcd_Write_String@a+1
  1587  0672  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1588  0677                     l1658:
  1589                           
  1590                           ;main.c: 124:         Lcd_Set_Cursor(2,5);
  1591  0677  3005               	movlw	5
  1592  0678  1283               	bcf	3,5	;RP0=0, select bank0
  1593  0679  1303               	bcf	3,6	;RP1=0, select bank0
  1594  067A  00AD               	movwf	??_main
  1595  067B  082D               	movf	??_main,w
  1596  067C  00F4               	movwf	Lcd_Set_Cursor@b
  1597  067D  3002               	movlw	2
  1598  067E  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1599  0683                     l1660:
  1600                           
  1601                           ;main.c: 125:         Lcd_Write_String("Abierta");
  1602  0683  30A2               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1603  0684  00F5               	movwf	Lcd_Write_String@a
  1604  0685  3080               	movlw	128
  1605  0686  00F6               	movwf	Lcd_Write_String@a+1
  1606  0687  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1607  068C                     l1662:
  1608                           
  1609                           ;main.c: 126:         _delay((unsigned long)((5000)*(4000000/4000.0)));
  1610  068C  301A               	movlw	26
  1611  068D  1283               	bcf	3,5	;RP0=0, select bank0
  1612  068E  1303               	bcf	3,6	;RP1=0, select bank0
  1613  068F  00AF               	movwf	??_main+2
  1614  0690  305E               	movlw	94
  1615  0691  00AE               	movwf	??_main+1
  1616  0692  306D               	movlw	109
  1617  0693  00AD               	movwf	??_main
  1618  0694                     u1297:
  1619  0694  0BAD               	decfsz	??_main,f
  1620  0695  2E94               	goto	u1297
  1621  0696  0BAE               	decfsz	??_main+1,f
  1622  0697  2E94               	goto	u1297
  1623  0698  0BAF               	decfsz	??_main+2,f
  1624  0699  2E94               	goto	u1297
  1625  069A  2E9B               	nop2
  1626                           
  1627                           ;main.c: 127:     }
  1628  069B  2FCD               	goto	l1718
  1629  069C                     l1664:
  1630  069C  3004               	movlw	4
  1631  069D  0647               	xorwf	_Bandera,w
  1632  069E  0448               	iorwf	_Bandera+1,w
  1633  069F  1D03               	btfss	3,2
  1634  06A0  2EA2               	goto	u1181
  1635  06A1  2EA3               	goto	u1180
  1636  06A2                     u1181:
  1637  06A2  2FCD               	goto	l1718
  1638  06A3                     u1180:
  1639  06A3                     l1666:
  1640                           
  1641                           ;main.c: 130:         Lcd_Clear();
  1642  06A3  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1643                           
  1644                           ;main.c: 131:         Lcd_Set_Cursor(1,6);
  1645  06A8  3006               	movlw	6
  1646  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  1647  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  1648  06AB  00AD               	movwf	??_main
  1649  06AC  082D               	movf	??_main,w
  1650  06AD  00F4               	movwf	Lcd_Set_Cursor@b
  1651  06AE  3001               	movlw	1
  1652  06AF  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1653  06B4                     l1668:
  1654                           
  1655                           ;main.c: 132:         Lcd_Write_String("Wrong");
  1656  06B4  30AA               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1657  06B5  00F5               	movwf	Lcd_Write_String@a
  1658  06B6  3080               	movlw	128
  1659  06B7  00F6               	movwf	Lcd_Write_String@a+1
  1660  06B8  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1661  06BD                     l1670:
  1662                           
  1663                           ;main.c: 133:         Lcd_Set_Cursor(2,5);
  1664  06BD  3005               	movlw	5
  1665  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  1666  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  1667  06C0  00AD               	movwf	??_main
  1668  06C1  082D               	movf	??_main,w
  1669  06C2  00F4               	movwf	Lcd_Set_Cursor@b
  1670  06C3  3002               	movlw	2
  1671  06C4  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1672                           
  1673                           ;main.c: 134:         Lcd_Write_String("Password");
  1674  06C9  3088               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1675  06CA  00F5               	movwf	Lcd_Write_String@a
  1676  06CB  3080               	movlw	128
  1677  06CC  00F6               	movwf	Lcd_Write_String@a+1
  1678  06CD  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1679  06D2                     l1672:
  1680                           
  1681                           ;main.c: 135:         _delay((unsigned long)((2000)*(4000000/4000.0)));
  1682  06D2  300B               	movlw	11
  1683  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  1684  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  1685  06D5  00AF               	movwf	??_main+2
  1686  06D6  3026               	movlw	38
  1687  06D7  00AE               	movwf	??_main+1
  1688  06D8  305D               	movlw	93
  1689  06D9  00AD               	movwf	??_main
  1690  06DA                     u1307:
  1691  06DA  0BAD               	decfsz	??_main,f
  1692  06DB  2EDA               	goto	u1307
  1693  06DC  0BAE               	decfsz	??_main+1,f
  1694  06DD  2EDA               	goto	u1307
  1695  06DE  0BAF               	decfsz	??_main+2,f
  1696  06DF  2EDA               	goto	u1307
  1697  06E0                     l1674:
  1698                           
  1699                           ;main.c: 136:         Try ++;
  1700  06E0  3001               	movlw	1
  1701  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  1702  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  1703  06E3  07D7               	addwf	_Try,f
  1704  06E4  1803               	skipnc
  1705  06E5  0AD8               	incf	_Try+1,f
  1706  06E6  3000               	movlw	0
  1707  06E7  07D8               	addwf	_Try+1,f
  1708  06E8                     l1676:
  1709                           
  1710                           ;main.c: 137:         Bandera = 0;
  1711  06E8  01C7               	clrf	_Bandera
  1712  06E9  01C8               	clrf	_Bandera+1
  1713  06EA                     l1678:
  1714                           
  1715                           ;main.c: 138:         if(Try == 3){
  1716  06EA  3003               	movlw	3
  1717  06EB  0657               	xorwf	_Try,w
  1718  06EC  0458               	iorwf	_Try+1,w
  1719  06ED  1D03               	btfss	3,2
  1720  06EE  2EF0               	goto	u1191
  1721  06EF  2EF1               	goto	u1190
  1722  06F0                     u1191:
  1723  06F0  2F33               	goto	l1690
  1724  06F1                     u1190:
  1725  06F1                     l1680:
  1726                           
  1727                           ;main.c: 139:             Bloqueo();
  1728  06F1  120A  158A  27E3  120A  118A  	fcall	_Bloqueo
  1729                           
  1730                           ;main.c: 140:             Lcd_Clear();
  1731  06F6  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1732                           
  1733                           ;main.c: 141:             Lcd_Set_Cursor(1,4);
  1734  06FB  3004               	movlw	4
  1735  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  1736  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  1737  06FE  00AD               	movwf	??_main
  1738  06FF  082D               	movf	??_main,w
  1739  0700  00F4               	movwf	Lcd_Set_Cursor@b
  1740  0701  3001               	movlw	1
  1741  0702  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1742  0707                     l1682:
  1743                           
  1744                           ;main.c: 142:             Lcd_Write_String("Bloqueada");
  1745  0707  306A               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1746  0708  00F5               	movwf	Lcd_Write_String@a
  1747  0709  3080               	movlw	128
  1748  070A  00F6               	movwf	Lcd_Write_String@a+1
  1749  070B  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1750  0710                     l1684:
  1751                           
  1752                           ;main.c: 143:             _delay((unsigned long)((3000)*(4000000/4000.0)));
  1753  0710  3010               	movlw	16
  1754  0711  1283               	bcf	3,5	;RP0=0, select bank0
  1755  0712  1303               	bcf	3,6	;RP1=0, select bank0
  1756  0713  00AF               	movwf	??_main+2
  1757  0714  3039               	movlw	57
  1758  0715  00AE               	movwf	??_main+1
  1759  0716  300D               	movlw	13
  1760  0717  00AD               	movwf	??_main
  1761  0718                     u1317:
  1762  0718  0BAD               	decfsz	??_main,f
  1763  0719  2F18               	goto	u1317
  1764  071A  0BAE               	decfsz	??_main+1,f
  1765  071B  2F18               	goto	u1317
  1766  071C  0BAF               	decfsz	??_main+2,f
  1767  071D  2F18               	goto	u1317
  1768  071E                     l1686:
  1769                           
  1770                           ;main.c: 144:             True = 2;
  1771  071E  3002               	movlw	2
  1772  071F  1283               	bcf	3,5	;RP0=0, select bank0
  1773  0720  1303               	bcf	3,6	;RP1=0, select bank0
  1774  0721  00D5               	movwf	_True
  1775  0722  3000               	movlw	0
  1776  0723  00D6               	movwf	_True+1
  1777  0724                     l1688:
  1778                           
  1779                           ;main.c: 145:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1780  0724  3003               	movlw	3
  1781  0725  1283               	bcf	3,5	;RP0=0, select bank0
  1782  0726  1303               	bcf	3,6	;RP1=0, select bank0
  1783  0727  00AF               	movwf	??_main+2
  1784  0728  308A               	movlw	138
  1785  0729  00AE               	movwf	??_main+1
  1786  072A  3055               	movlw	85
  1787  072B  00AD               	movwf	??_main
  1788  072C                     u1327:
  1789  072C  0BAD               	decfsz	??_main,f
  1790  072D  2F2C               	goto	u1327
  1791  072E  0BAE               	decfsz	??_main+1,f
  1792  072F  2F2C               	goto	u1327
  1793  0730  0BAF               	decfsz	??_main+2,f
  1794  0731  2F2C               	goto	u1327
  1795                           
  1796                           ;main.c: 146:         }
  1797  0732  2FCD               	goto	l1718
  1798  0733                     l1690:
  1799                           
  1800                           ;main.c: 148:             Lcd_Clear();
  1801  0733  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1802                           
  1803                           ;main.c: 149:             Lcd_Set_Cursor(1,4);
  1804  0738  3004               	movlw	4
  1805  0739  1283               	bcf	3,5	;RP0=0, select bank0
  1806  073A  1303               	bcf	3,6	;RP1=0, select bank0
  1807  073B  00AD               	movwf	??_main
  1808  073C  082D               	movf	??_main,w
  1809  073D  00F4               	movwf	Lcd_Set_Cursor@b
  1810  073E  3001               	movlw	1
  1811  073F  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1812  0744                     l1692:
  1813                           
  1814                           ;main.c: 150:             Lcd_Write_String("Try Again");
  1815  0744  307E               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1816  0745  00F5               	movwf	Lcd_Write_String@a
  1817  0746  3080               	movlw	128
  1818  0747  00F6               	movwf	Lcd_Write_String@a+1
  1819  0748  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1820  074D                     l1694:
  1821                           
  1822                           ;main.c: 151:             _delay((unsigned long)((1500)*(4000000/4000.0)));
  1823  074D  3008               	movlw	8
  1824  074E  1283               	bcf	3,5	;RP0=0, select bank0
  1825  074F  1303               	bcf	3,6	;RP1=0, select bank0
  1826  0750  00AF               	movwf	??_main+2
  1827  0751  309D               	movlw	157
  1828  0752  00AE               	movwf	??_main+1
  1829  0753  3005               	movlw	5
  1830  0754  00AD               	movwf	??_main
  1831  0755                     u1337:
  1832  0755  0BAD               	decfsz	??_main,f
  1833  0756  2F55               	goto	u1337
  1834  0757  0BAE               	decfsz	??_main+1,f
  1835  0758  2F55               	goto	u1337
  1836  0759  0BAF               	decfsz	??_main+2,f
  1837  075A  2F55               	goto	u1337
  1838  075B                     l1696:
  1839                           
  1840                           ;main.c: 152:             Lcd_Clear();
  1841  075B  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1842  0760                     l1698:
  1843                           
  1844                           ;main.c: 153:             Lcd_Set_Cursor(1,5);
  1845  0760  3005               	movlw	5
  1846  0761  1283               	bcf	3,5	;RP0=0, select bank0
  1847  0762  1303               	bcf	3,6	;RP1=0, select bank0
  1848  0763  00AD               	movwf	??_main
  1849  0764  082D               	movf	??_main,w
  1850  0765  00F4               	movwf	Lcd_Set_Cursor@b
  1851  0766  3001               	movlw	1
  1852  0767  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1853  076C                     l1700:
  1854                           
  1855                           ;main.c: 154:             Lcd_Write_String("Press #");
  1856  076C  309A               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1857  076D  00F5               	movwf	Lcd_Write_String@a
  1858  076E  3080               	movlw	128
  1859  076F  00F6               	movwf	Lcd_Write_String@a+1
  1860  0770  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1861  0775                     l1702:
  1862                           
  1863                           ;main.c: 155:             Tecla = Leer_tecla();
  1864  0775  120A  118A  22C3  120A  118A  	fcall	_Leer_tecla
  1865  077A  1283               	bcf	3,5	;RP0=0, select bank0
  1866  077B  1303               	bcf	3,6	;RP1=0, select bank0
  1867  077C  00AD               	movwf	??_main
  1868  077D  01AE               	clrf	??_main+1
  1869  077E  082D               	movf	??_main,w
  1870  077F  00C9               	movwf	_Tecla
  1871  0780  082E               	movf	??_main+1,w
  1872  0781  00CA               	movwf	_Tecla+1
  1873  0782                     l1704:
  1874                           
  1875                           ;main.c: 156:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1876  0782  3003               	movlw	3
  1877  0783  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0784  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0785  00AF               	movwf	??_main+2
  1880  0786  308A               	movlw	138
  1881  0787  00AE               	movwf	??_main+1
  1882  0788  3055               	movlw	85
  1883  0789  00AD               	movwf	??_main
  1884  078A                     u1347:
  1885  078A  0BAD               	decfsz	??_main,f
  1886  078B  2F8A               	goto	u1347
  1887  078C  0BAE               	decfsz	??_main+1,f
  1888  078D  2F8A               	goto	u1347
  1889  078E  0BAF               	decfsz	??_main+2,f
  1890  078F  2F8A               	goto	u1347
  1891  0790                     l1710:	
  1892                           ;main.c: 157:             while(Tecla != 35){
  1893                           
  1894                           
  1895                           ;main.c: 157:             while(Tecla != 35){
  1896  0790  3023               	movlw	35
  1897  0791  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0792  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0793  0649               	xorwf	_Tecla,w
  1900  0794  044A               	iorwf	_Tecla+1,w
  1901  0795  1D03               	btfss	3,2
  1902  0796  2F98               	goto	u1201
  1903  0797  2F99               	goto	u1200
  1904  0798                     u1201:
  1905  0798  2F75               	goto	l1702
  1906  0799                     u1200:
  1907  0799                     l1712:
  1908                           
  1909                           ;main.c: 161:             Sonar();
  1910  0799  120A  158A  27B0  120A  118A  	fcall	_Sonar
  1911                           
  1912                           ;main.c: 162:             Lcd_Clear();
  1913  079E  120A  118A  20C9  120A  118A  	fcall	_Lcd_Clear
  1914                           
  1915                           ;main.c: 163:             Lcd_Set_Cursor(1,3);
  1916  07A3  3003               	movlw	3
  1917  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  1918  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  1919  07A6  00AD               	movwf	??_main
  1920  07A7  082D               	movf	??_main,w
  1921  07A8  00F4               	movwf	Lcd_Set_Cursor@b
  1922  07A9  3001               	movlw	1
  1923  07AA  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1924  07AF                     l1714:
  1925                           
  1926                           ;main.c: 164:             Lcd_Write_String("Ingrese Clave");
  1927  07AF  3050               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1928  07B0  00F5               	movwf	Lcd_Write_String@a
  1929  07B1  3080               	movlw	128
  1930  07B2  00F6               	movwf	Lcd_Write_String@a+1
  1931  07B3  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1932  07B8                     l1716:
  1933                           
  1934                           ;main.c: 165:             Lcd_Set_Cursor(2,4);
  1935  07B8  3004               	movlw	4
  1936  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  1937  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  1938  07BB  00AD               	movwf	??_main
  1939  07BC  082D               	movf	??_main,w
  1940  07BD  00F4               	movwf	Lcd_Set_Cursor@b
  1941  07BE  3002               	movlw	2
  1942  07BF  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1943                           
  1944                           ;main.c: 166:             Lcd_Write_String("Otra Vez");
  1945  07C4  3091               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1946  07C5  00F5               	movwf	Lcd_Write_String@a
  1947  07C6  3080               	movlw	128
  1948  07C7  00F6               	movwf	Lcd_Write_String@a+1
  1949  07C8  120A  118A  218E  120A  118A  	fcall	_Lcd_Write_String
  1950  07CD                     l1718:
  1951                           
  1952                           ;main.c: 66:   while((Try < 3) && (True == 0) ){
  1953  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  1954  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  1955  07CF  0858               	movf	_Try+1,w
  1956  07D0  3A80               	xorlw	128
  1957  07D1  00FF               	movwf	btemp+1
  1958  07D2  3080               	movlw	128
  1959  07D3  027F               	subwf	btemp+1,w
  1960  07D4  1D03               	skipz
  1961  07D5  2FD8               	goto	u1215
  1962  07D6  3003               	movlw	3
  1963  07D7  0257               	subwf	_Try,w
  1964  07D8                     u1215:
  1965  07D8  1803               	skipnc
  1966  07D9  2FDB               	goto	u1211
  1967  07DA  2FDC               	goto	u1210
  1968  07DB                     u1211:
  1969  07DB  2FE4               	goto	l151
  1970  07DC                     u1210:
  1971  07DC                     l1720:
  1972  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  1973  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  1974  07DE  0855               	movf	_True,w
  1975  07DF  0456               	iorwf	_True+1,w
  1976  07E0  1903               	btfsc	3,2
  1977  07E1  2FE3               	goto	u1221
  1978  07E2  2FE4               	goto	u1220
  1979  07E3                     u1221:
  1980  07E3  2CA0               	goto	l1564
  1981  07E4                     u1220:
  1982  07E4                     l151:
  1983  07E4  120A  118A  2800   	ljmp	start
  1984  07E7                     __end_of_main:
  1985                           
  1986                           	psect	text1
  1987  0365                     __ptext1:	
  1988 ;; *************** function _sprintf *****************
  1989 ;; Defined at:
  1990 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;  sp              1    wreg     PTR unsigned char 
  1993 ;;		 -> main@Cadena(20), 
  1994 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1995 ;;		 -> STR_6(17), STR_5(17), STR_4(18), STR_3(17), 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1998 ;;		 -> main@Cadena(20), 
  1999 ;;  tmpval          4    0        struct .
  2000 ;;  val             2    9[BANK0 ] unsigned int 
  2001 ;;  cp              2    0        PTR const unsigned char 
  2002 ;;  len             2    0        unsigned int 
  2003 ;;  c               1   12[BANK0 ] unsigned char 
  2004 ;;  prec            1    8[BANK0 ] char 
  2005 ;;  flag            1    7[BANK0 ] unsigned char 
  2006 ;;  ap              1    6[BANK0 ] PTR void [1]
  2007 ;;		 -> ?_sprintf(2), 
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  2    0[BANK0 ] int 
  2010 ;; Registers used:
  2011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2017 ;;      Params:         0       3       0       0       0
  2018 ;;      Locals:         0       7       0       0       0
  2019 ;;      Temps:          0       3       0       0       0
  2020 ;;      Totals:         0      13       0       0       0
  2021 ;;Total ram usage:       13 bytes
  2022 ;; Hardware stack levels used: 1
  2023 ;; Hardware stack levels required when called: 1
  2024 ;; This function calls:
  2025 ;;		___lwdiv
  2026 ;;		___lwmod
  2027 ;; This function is called by:
  2028 ;;		_main
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032  0365                     _sprintf:	
  2033                           ;psect for function _sprintf
  2034                           
  2035                           
  2036                           ;incstack = 0
  2037                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2038                           ;sprintf@sp stored from wreg
  2039  0365  1283               	bcf	3,5	;RP0=0, select bank0
  2040  0366  1303               	bcf	3,6	;RP1=0, select bank0
  2041  0367  00AB               	movwf	sprintf@sp
  2042  0368                     l1458:
  2043                           
  2044                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2045  0368  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2046  0369  00A3               	movwf	??_sprintf
  2047  036A  0823               	movf	??_sprintf,w
  2048  036B  00A6               	movwf	sprintf@ap
  2049                           
  2050                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2051  036C  2C36               	goto	l1510
  2052  036D                     l1460:
  2053                           
  2054                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2055  036D  3025               	movlw	37
  2056  036E  062C               	xorwf	sprintf@c,w
  2057  036F  1903               	btfsc	3,2
  2058  0370  2B72               	goto	u991
  2059  0371  2B73               	goto	u990
  2060  0372                     u991:
  2061  0372  2B7F               	goto	l1466
  2062  0373                     u990:
  2063  0373                     l1462:
  2064                           
  2065                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2066  0373  082C               	movf	sprintf@c,w
  2067  0374  00A3               	movwf	??_sprintf
  2068  0375  082B               	movf	sprintf@sp,w
  2069  0376  0084               	movwf	4
  2070  0377  0823               	movf	??_sprintf,w
  2071  0378  1383               	bcf	3,7	;select IRP bank0
  2072  0379  0080               	movwf	0
  2073  037A                     l1464:
  2074  037A  3001               	movlw	1
  2075  037B  00A3               	movwf	??_sprintf
  2076  037C  0823               	movf	??_sprintf,w
  2077  037D  07AB               	addwf	sprintf@sp,f
  2078                           
  2079                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 559:    continue;
  2080  037E  2C36               	goto	l1510
  2081  037F                     l1466:
  2082                           
  2083                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2084  037F  01A7               	clrf	sprintf@flag
  2085  0380                     l1470:	
  2086                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  2087                           
  2088  0380  3001               	movlw	1
  2089  0381  07A0               	addwf	sprintf@f,f
  2090  0382  30FF               	movlw	-1
  2091  0383  0720               	addwf	sprintf@f,w
  2092  0384  0084               	movwf	4
  2093  0385  120A  118A  200D  120A  118A  	fcall	stringdir
  2094  038A  00AC               	movwf	sprintf@c
  2095  038B  00A3               	movwf	??_sprintf
  2096  038C  01A4               	clrf	??_sprintf+1
  2097                           
  2098                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2099                           ; Switch size 1, requested type "simple"
  2100                           ; Number of cases is 1, Range of values is 0 to 0
  2101                           ; switch strategies available:
  2102                           ; Name         Instructions Cycles
  2103                           ; simple_byte            4     3 (average)
  2104                           ; direct_byte           11     8 (fixed)
  2105                           ; jumptable            260     6 (fixed)
  2106                           ;	Chosen strategy is simple_byte
  2107  038D  0824               	movf	??_sprintf+1,w
  2108  038E  3A00               	xorlw	0	; case 0
  2109  038F  1903               	skipnz
  2110  0390  2B92               	goto	l1742
  2111  0391  2C36               	goto	l1510
  2112  0392                     l1742:
  2113                           
  2114                           ; Switch size 1, requested type "simple"
  2115                           ; Number of cases is 3, Range of values is 0 to 105
  2116                           ; switch strategies available:
  2117                           ; Name         Instructions Cycles
  2118                           ; simple_byte           10     6 (average)
  2119                           ; jumptable            260     6 (fixed)
  2120                           ;	Chosen strategy is simple_byte
  2121  0392  0823               	movf	??_sprintf,w
  2122  0393  3A00               	xorlw	0	; case 0
  2123  0394  1903               	skipnz
  2124  0395  2C48               	goto	l1512
  2125  0396  3A64               	xorlw	100	; case 100
  2126  0397  1903               	skipnz
  2127  0398  2B9D               	goto	l1472
  2128  0399  3A0D               	xorlw	13	; case 105
  2129  039A  1903               	skipnz
  2130  039B  2B9D               	goto	l1472
  2131  039C  2C36               	goto	l1510
  2132  039D                     l1472:
  2133                           
  2134                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2135  039D  0826               	movf	sprintf@ap,w
  2136  039E  0084               	movwf	4
  2137  039F  1383               	bcf	3,7	;select IRP bank0
  2138  03A0  0800               	movf	0,w
  2139  03A1  00A9               	movwf	sprintf@val
  2140  03A2  0A84               	incf	4,f
  2141  03A3  0800               	movf	0,w
  2142  03A4  00AA               	movwf	sprintf@val+1
  2143  03A5                     l1474:
  2144  03A5  3002               	movlw	2
  2145  03A6  00A3               	movwf	??_sprintf
  2146  03A7  0823               	movf	??_sprintf,w
  2147  03A8  07A6               	addwf	sprintf@ap,f
  2148  03A9                     l1476:
  2149                           
  2150                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2151  03A9  1FAA               	btfss	sprintf@val+1,7
  2152  03AA  2BAC               	goto	u1001
  2153  03AB  2BAD               	goto	u1000
  2154  03AC                     u1001:
  2155  03AC  2BB6               	goto	l1482
  2156  03AD                     u1000:
  2157  03AD                     l1478:
  2158                           
  2159                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2160  03AD  3003               	movlw	3
  2161  03AE  00A3               	movwf	??_sprintf
  2162  03AF  0823               	movf	??_sprintf,w
  2163  03B0  04A7               	iorwf	sprintf@flag,f
  2164  03B1                     l1480:
  2165                           
  2166                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2167  03B1  09A9               	comf	sprintf@val,f
  2168  03B2  09AA               	comf	sprintf@val+1,f
  2169  03B3  0AA9               	incf	sprintf@val,f
  2170  03B4  1903               	skipnz
  2171  03B5  0AAA               	incf	sprintf@val+1,f
  2172  03B6                     l1482:
  2173                           
  2174                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  2175  03B6  01AC               	clrf	sprintf@c
  2176  03B7  0AAC               	incf	sprintf@c,f
  2177  03B8                     l1488:
  2178                           
  2179                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2180  03B8  082C               	movf	sprintf@c,w
  2181  03B9  00A3               	movwf	??_sprintf
  2182  03BA  0723               	addwf	??_sprintf,w
  2183  03BB  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2184  03BC  0084               	movwf	4
  2185  03BD  120A  118A  200D  120A  118A  	fcall	stringdir
  2186  03C2  00A4               	movwf	??_sprintf+1
  2187  03C3  120A  118A  200D  120A  118A  	fcall	stringdir
  2188  03C8  00A5               	movwf	??_sprintf+2
  2189  03C9  0825               	movf	??_sprintf+2,w
  2190  03CA  022A               	subwf	sprintf@val+1,w
  2191  03CB  1D03               	skipz
  2192  03CC  2BCF               	goto	u1015
  2193  03CD  0824               	movf	??_sprintf+1,w
  2194  03CE  0229               	subwf	sprintf@val,w
  2195  03CF                     u1015:
  2196  03CF  1803               	skipnc
  2197  03D0  2BD2               	goto	u1011
  2198  03D1  2BD3               	goto	u1010
  2199  03D2                     u1011:
  2200  03D2  2BD4               	goto	l1492
  2201  03D3                     u1010:
  2202  03D3  2BDE               	goto	l1494
  2203  03D4                     l1492:
  2204  03D4  3001               	movlw	1
  2205  03D5  00A3               	movwf	??_sprintf
  2206  03D6  0823               	movf	??_sprintf,w
  2207  03D7  07AC               	addwf	sprintf@c,f
  2208  03D8  3005               	movlw	5
  2209  03D9  062C               	xorwf	sprintf@c,w
  2210  03DA  1D03               	btfss	3,2
  2211  03DB  2BDD               	goto	u1021
  2212  03DC  2BDE               	goto	u1020
  2213  03DD                     u1021:
  2214  03DD  2BB8               	goto	l1488
  2215  03DE                     u1020:
  2216  03DE                     l1494:
  2217                           
  2218                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  2219  03DE  0827               	movf	sprintf@flag,w
  2220  03DF  3903               	andlw	3
  2221  03E0  1903               	btfsc	3,2
  2222  03E1  2BE3               	goto	u1031
  2223  03E2  2BE4               	goto	u1030
  2224  03E3                     u1031:
  2225  03E3  2BEF               	goto	l1500
  2226  03E4                     u1030:
  2227  03E4                     l1496:
  2228                           
  2229                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2230  03E4  302D               	movlw	45
  2231  03E5  00A3               	movwf	??_sprintf
  2232  03E6  082B               	movf	sprintf@sp,w
  2233  03E7  0084               	movwf	4
  2234  03E8  0823               	movf	??_sprintf,w
  2235  03E9  1383               	bcf	3,7	;select IRP bank0
  2236  03EA  0080               	movwf	0
  2237  03EB                     l1498:
  2238  03EB  3001               	movlw	1
  2239  03EC  00A3               	movwf	??_sprintf
  2240  03ED  0823               	movf	??_sprintf,w
  2241  03EE  07AB               	addwf	sprintf@sp,f
  2242  03EF                     l1500:
  2243                           
  2244                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2245  03EF  082C               	movf	sprintf@c,w
  2246  03F0  00A3               	movwf	??_sprintf
  2247  03F1  0823               	movf	??_sprintf,w
  2248  03F2  00A8               	movwf	sprintf@prec
  2249                           
  2250                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2251  03F3  2C2D               	goto	l1508
  2252  03F4                     l1502:
  2253                           
  2254                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2255  03F4  300A               	movlw	10
  2256  03F5  00F8               	movwf	___lwmod@divisor
  2257  03F6  3000               	movlw	0
  2258  03F7  00F9               	movwf	___lwmod@divisor+1
  2259  03F8  0828               	movf	sprintf@prec,w
  2260  03F9  00A3               	movwf	??_sprintf
  2261  03FA  0723               	addwf	??_sprintf,w
  2262  03FB  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2263  03FC  0084               	movwf	4
  2264  03FD  120A  118A  200D  120A  118A  	fcall	stringdir
  2265  0402  00F0               	movwf	___lwdiv@divisor
  2266  0403  120A  118A  200D  120A  118A  	fcall	stringdir
  2267  0408  00F1               	movwf	___lwdiv@divisor+1
  2268  0409  082A               	movf	sprintf@val+1,w
  2269  040A  00F3               	movwf	___lwdiv@dividend+1
  2270  040B  0829               	movf	sprintf@val,w
  2271  040C  00F2               	movwf	___lwdiv@dividend
  2272  040D  120A  118A  21D0  120A  118A  	fcall	___lwdiv
  2273  0412  0871               	movf	?___lwdiv+1,w
  2274  0413  00FB               	movwf	___lwmod@dividend+1
  2275  0414  0870               	movf	?___lwdiv,w
  2276  0415  00FA               	movwf	___lwmod@dividend
  2277  0416  120A  118A  2154  120A  118A  	fcall	___lwmod
  2278  041B  0878               	movf	?___lwmod,w
  2279  041C  3E30               	addlw	48
  2280  041D  1283               	bcf	3,5	;RP0=0, select bank0
  2281  041E  1303               	bcf	3,6	;RP1=0, select bank0
  2282  041F  00A4               	movwf	??_sprintf+1
  2283  0420  0824               	movf	??_sprintf+1,w
  2284  0421  00AC               	movwf	sprintf@c
  2285  0422                     l1504:
  2286                           
  2287                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2288  0422  082C               	movf	sprintf@c,w
  2289  0423  00A3               	movwf	??_sprintf
  2290  0424  082B               	movf	sprintf@sp,w
  2291  0425  0084               	movwf	4
  2292  0426  0823               	movf	??_sprintf,w
  2293  0427  1383               	bcf	3,7	;select IRP bank0
  2294  0428  0080               	movwf	0
  2295  0429                     l1506:
  2296  0429  3001               	movlw	1
  2297  042A  00A3               	movwf	??_sprintf
  2298  042B  0823               	movf	??_sprintf,w
  2299  042C  07AB               	addwf	sprintf@sp,f
  2300  042D                     l1508:
  2301                           
  2302                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2303  042D  30FF               	movlw	255
  2304  042E  00A3               	movwf	??_sprintf
  2305  042F  0823               	movf	??_sprintf,w
  2306  0430  07A8               	addwf	sprintf@prec,f
  2307  0431  0A28               	incf	sprintf@prec,w
  2308  0432  1D03               	btfss	3,2
  2309  0433  2C35               	goto	u1041
  2310  0434  2C36               	goto	u1040
  2311  0435                     u1041:
  2312  0435  2BF4               	goto	l1502
  2313  0436                     u1040:
  2314  0436                     l1510:
  2315                           
  2316                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2317  0436  3001               	movlw	1
  2318  0437  07A0               	addwf	sprintf@f,f
  2319  0438  30FF               	movlw	-1
  2320  0439  0720               	addwf	sprintf@f,w
  2321  043A  0084               	movwf	4
  2322  043B  120A  118A  200D  120A  118A  	fcall	stringdir
  2323  0440  00A3               	movwf	??_sprintf
  2324  0441  0823               	movf	??_sprintf,w
  2325  0442  00AC               	movwf	sprintf@c
  2326  0443  082C               	movf	sprintf@c,w
  2327  0444  1D03               	btfss	3,2
  2328  0445  2C47               	goto	u1051
  2329  0446  2C48               	goto	u1050
  2330  0447                     u1051:
  2331  0447  2B6D               	goto	l1460
  2332  0448                     u1050:
  2333  0448                     l1512:
  2334                           
  2335                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2336  0448  082B               	movf	sprintf@sp,w
  2337  0449  0084               	movwf	4
  2338  044A  1383               	bcf	3,7	;select IRP bank0
  2339  044B  0180               	clrf	0
  2340  044C                     l296:
  2341  044C  0008               	return
  2342  044D                     __end_of_sprintf:
  2343                           
  2344                           	psect	text2
  2345  0154                     __ptext2:	
  2346 ;; *************** function ___lwmod *****************
  2347 ;; Defined at:
  2348 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;  divisor         2    8[COMMON] unsigned int 
  2351 ;;  dividend        2   10[COMMON] unsigned int 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  counter         1   13[COMMON] unsigned char 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  2    8[COMMON] unsigned int 
  2356 ;; Registers used:
  2357 ;;		wreg, status,2, status,0
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2363 ;;      Params:         4       0       0       0       0
  2364 ;;      Locals:         1       0       0       0       0
  2365 ;;      Temps:          1       0       0       0       0
  2366 ;;      Totals:         6       0       0       0       0
  2367 ;;Total ram usage:        6 bytes
  2368 ;; Hardware stack levels used: 1
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_sprintf
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376  0154                     ___lwmod:	
  2377                           ;psect for function ___lwmod
  2378                           
  2379  0154                     l1340:	
  2380                           ;incstack = 0
  2381                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2382                           
  2383  0154  0878               	movf	___lwmod@divisor,w
  2384  0155  0479               	iorwf	___lwmod@divisor+1,w
  2385  0156  1903               	btfsc	3,2
  2386  0157  2959               	goto	u741
  2387  0158  295A               	goto	u740
  2388  0159                     u741:
  2389  0159  2989               	goto	l1358
  2390  015A                     u740:
  2391  015A                     l1342:
  2392  015A  01FD               	clrf	___lwmod@counter
  2393  015B  0AFD               	incf	___lwmod@counter,f
  2394  015C  2968               	goto	l1348
  2395  015D                     l1344:
  2396  015D  3001               	movlw	1
  2397  015E                     u755:
  2398  015E  1003               	clrc
  2399  015F  0DF8               	rlf	___lwmod@divisor,f
  2400  0160  0DF9               	rlf	___lwmod@divisor+1,f
  2401  0161  3EFF               	addlw	-1
  2402  0162  1D03               	skipz
  2403  0163  295E               	goto	u755
  2404  0164                     l1346:
  2405  0164  3001               	movlw	1
  2406  0165  00FC               	movwf	??___lwmod
  2407  0166  087C               	movf	??___lwmod,w
  2408  0167  07FD               	addwf	___lwmod@counter,f
  2409  0168                     l1348:
  2410  0168  1FF9               	btfss	___lwmod@divisor+1,7
  2411  0169  296B               	goto	u761
  2412  016A  296C               	goto	u760
  2413  016B                     u761:
  2414  016B  295D               	goto	l1344
  2415  016C                     u760:
  2416  016C                     l1350:
  2417  016C  0879               	movf	___lwmod@divisor+1,w
  2418  016D  027B               	subwf	___lwmod@dividend+1,w
  2419  016E  1D03               	skipz
  2420  016F  2972               	goto	u775
  2421  0170  0878               	movf	___lwmod@divisor,w
  2422  0171  027A               	subwf	___lwmod@dividend,w
  2423  0172                     u775:
  2424  0172  1C03               	skipc
  2425  0173  2975               	goto	u771
  2426  0174  2976               	goto	u770
  2427  0175                     u771:
  2428  0175  297C               	goto	l1354
  2429  0176                     u770:
  2430  0176                     l1352:
  2431  0176  0878               	movf	___lwmod@divisor,w
  2432  0177  02FA               	subwf	___lwmod@dividend,f
  2433  0178  0879               	movf	___lwmod@divisor+1,w
  2434  0179  1C03               	skipc
  2435  017A  03FB               	decf	___lwmod@dividend+1,f
  2436  017B  02FB               	subwf	___lwmod@dividend+1,f
  2437  017C                     l1354:
  2438  017C  3001               	movlw	1
  2439  017D                     u785:
  2440  017D  1003               	clrc
  2441  017E  0CF9               	rrf	___lwmod@divisor+1,f
  2442  017F  0CF8               	rrf	___lwmod@divisor,f
  2443  0180  3EFF               	addlw	-1
  2444  0181  1D03               	skipz
  2445  0182  297D               	goto	u785
  2446  0183                     l1356:
  2447  0183  3001               	movlw	1
  2448  0184  02FD               	subwf	___lwmod@counter,f
  2449  0185  1D03               	btfss	3,2
  2450  0186  2988               	goto	u791
  2451  0187  2989               	goto	u790
  2452  0188                     u791:
  2453  0188  296C               	goto	l1350
  2454  0189                     u790:
  2455  0189                     l1358:
  2456  0189  087B               	movf	___lwmod@dividend+1,w
  2457  018A  00F9               	movwf	?___lwmod+1
  2458  018B  087A               	movf	___lwmod@dividend,w
  2459  018C  00F8               	movwf	?___lwmod
  2460  018D                     l582:
  2461  018D  0008               	return
  2462  018E                     __end_of___lwmod:
  2463                           
  2464                           	psect	text3
  2465  01D0                     __ptext3:	
  2466 ;; *************** function ___lwdiv *****************
  2467 ;; Defined at:
  2468 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;  divisor         2    0[COMMON] unsigned int 
  2471 ;;  dividend        2    2[COMMON] unsigned int 
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;  quotient        2    5[COMMON] unsigned int 
  2474 ;;  counter         1    7[COMMON] unsigned char 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  2    0[COMMON] unsigned int 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, status,0
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2484 ;;      Params:         4       0       0       0       0
  2485 ;;      Locals:         3       0       0       0       0
  2486 ;;      Temps:          1       0       0       0       0
  2487 ;;      Totals:         8       0       0       0       0
  2488 ;;Total ram usage:        8 bytes
  2489 ;; Hardware stack levels used: 1
  2490 ;; This function calls:
  2491 ;;		Nothing
  2492 ;; This function is called by:
  2493 ;;		_sprintf
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497  01D0                     ___lwdiv:	
  2498                           ;psect for function ___lwdiv
  2499                           
  2500  01D0                     l1314:	
  2501                           ;incstack = 0
  2502                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2503                           
  2504  01D0  01F5               	clrf	___lwdiv@quotient
  2505  01D1  01F6               	clrf	___lwdiv@quotient+1
  2506  01D2                     l1316:
  2507  01D2  0870               	movf	___lwdiv@divisor,w
  2508  01D3  0471               	iorwf	___lwdiv@divisor+1,w
  2509  01D4  1903               	btfsc	3,2
  2510  01D5  29D7               	goto	u671
  2511  01D6  29D8               	goto	u670
  2512  01D7                     u671:
  2513  01D7  2A0F               	goto	l1336
  2514  01D8                     u670:
  2515  01D8                     l1318:
  2516  01D8  01F7               	clrf	___lwdiv@counter
  2517  01D9  0AF7               	incf	___lwdiv@counter,f
  2518  01DA  29E6               	goto	l1324
  2519  01DB                     l1320:
  2520  01DB  3001               	movlw	1
  2521  01DC                     u685:
  2522  01DC  1003               	clrc
  2523  01DD  0DF0               	rlf	___lwdiv@divisor,f
  2524  01DE  0DF1               	rlf	___lwdiv@divisor+1,f
  2525  01DF  3EFF               	addlw	-1
  2526  01E0  1D03               	skipz
  2527  01E1  29DC               	goto	u685
  2528  01E2                     l1322:
  2529  01E2  3001               	movlw	1
  2530  01E3  00F4               	movwf	??___lwdiv
  2531  01E4  0874               	movf	??___lwdiv,w
  2532  01E5  07F7               	addwf	___lwdiv@counter,f
  2533  01E6                     l1324:
  2534  01E6  1FF1               	btfss	___lwdiv@divisor+1,7
  2535  01E7  29E9               	goto	u691
  2536  01E8  29EA               	goto	u690
  2537  01E9                     u691:
  2538  01E9  29DB               	goto	l1320
  2539  01EA                     u690:
  2540  01EA                     l1326:
  2541  01EA  3001               	movlw	1
  2542  01EB                     u705:
  2543  01EB  1003               	clrc
  2544  01EC  0DF5               	rlf	___lwdiv@quotient,f
  2545  01ED  0DF6               	rlf	___lwdiv@quotient+1,f
  2546  01EE  3EFF               	addlw	-1
  2547  01EF  1D03               	skipz
  2548  01F0  29EB               	goto	u705
  2549  01F1  0871               	movf	___lwdiv@divisor+1,w
  2550  01F2  0273               	subwf	___lwdiv@dividend+1,w
  2551  01F3  1D03               	skipz
  2552  01F4  29F7               	goto	u715
  2553  01F5  0870               	movf	___lwdiv@divisor,w
  2554  01F6  0272               	subwf	___lwdiv@dividend,w
  2555  01F7                     u715:
  2556  01F7  1C03               	skipc
  2557  01F8  29FA               	goto	u711
  2558  01F9  29FB               	goto	u710
  2559  01FA                     u711:
  2560  01FA  2A02               	goto	l1332
  2561  01FB                     u710:
  2562  01FB                     l1328:
  2563  01FB  0870               	movf	___lwdiv@divisor,w
  2564  01FC  02F2               	subwf	___lwdiv@dividend,f
  2565  01FD  0871               	movf	___lwdiv@divisor+1,w
  2566  01FE  1C03               	skipc
  2567  01FF  03F3               	decf	___lwdiv@dividend+1,f
  2568  0200  02F3               	subwf	___lwdiv@dividend+1,f
  2569  0201                     l1330:
  2570  0201  1475               	bsf	___lwdiv@quotient,0
  2571  0202                     l1332:
  2572  0202  3001               	movlw	1
  2573  0203                     u725:
  2574  0203  1003               	clrc
  2575  0204  0CF1               	rrf	___lwdiv@divisor+1,f
  2576  0205  0CF0               	rrf	___lwdiv@divisor,f
  2577  0206  3EFF               	addlw	-1
  2578  0207  1D03               	skipz
  2579  0208  2A03               	goto	u725
  2580  0209                     l1334:
  2581  0209  3001               	movlw	1
  2582  020A  02F7               	subwf	___lwdiv@counter,f
  2583  020B  1D03               	btfss	3,2
  2584  020C  2A0E               	goto	u731
  2585  020D  2A0F               	goto	u730
  2586  020E                     u731:
  2587  020E  29EA               	goto	l1326
  2588  020F                     u730:
  2589  020F                     l1336:
  2590  020F  0876               	movf	___lwdiv@quotient+1,w
  2591  0210  00F1               	movwf	?___lwdiv+1
  2592  0211  0875               	movf	___lwdiv@quotient,w
  2593  0212  00F0               	movwf	?___lwdiv
  2594  0213                     l572:
  2595  0213  0008               	return
  2596  0214                     __end_of___lwdiv:
  2597                           
  2598                           	psect	text4
  2599  00F8                     __ptext4:	
  2600 ;; *************** function ___wmul *****************
  2601 ;; Defined at:
  2602 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;  multiplier      2    0[COMMON] unsigned int 
  2605 ;;  multiplicand    2    2[COMMON] unsigned int 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  product         2    4[COMMON] unsigned int 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  2    0[COMMON] unsigned int 
  2610 ;; Registers used:
  2611 ;;		wreg, status,2, status,0
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2617 ;;      Params:         4       0       0       0       0
  2618 ;;      Locals:         2       0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0
  2620 ;;      Totals:         6       0       0       0       0
  2621 ;;Total ram usage:        6 bytes
  2622 ;; Hardware stack levels used: 1
  2623 ;; This function calls:
  2624 ;;		Nothing
  2625 ;; This function is called by:
  2626 ;;		_main
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630  00F8                     ___wmul:	
  2631                           ;psect for function ___wmul
  2632                           
  2633  00F8                     l1520:	
  2634                           ;incstack = 0
  2635                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2636                           
  2637  00F8  01F4               	clrf	___wmul@product
  2638  00F9  01F5               	clrf	___wmul@product+1
  2639  00FA                     l1522:
  2640  00FA  1C70               	btfss	___wmul@multiplier,0
  2641  00FB  28FD               	goto	u1061
  2642  00FC  28FE               	goto	u1060
  2643  00FD                     u1061:
  2644  00FD  2904               	goto	l300
  2645  00FE                     u1060:
  2646  00FE                     l1524:
  2647  00FE  0872               	movf	___wmul@multiplicand,w
  2648  00FF  07F4               	addwf	___wmul@product,f
  2649  0100  1803               	skipnc
  2650  0101  0AF5               	incf	___wmul@product+1,f
  2651  0102  0873               	movf	___wmul@multiplicand+1,w
  2652  0103  07F5               	addwf	___wmul@product+1,f
  2653  0104                     l300:
  2654  0104  3001               	movlw	1
  2655  0105                     u1075:
  2656  0105  1003               	clrc
  2657  0106  0DF2               	rlf	___wmul@multiplicand,f
  2658  0107  0DF3               	rlf	___wmul@multiplicand+1,f
  2659  0108  3EFF               	addlw	-1
  2660  0109  1D03               	skipz
  2661  010A  2905               	goto	u1075
  2662  010B                     l1526:
  2663  010B  3001               	movlw	1
  2664  010C                     u1085:
  2665  010C  1003               	clrc
  2666  010D  0CF1               	rrf	___wmul@multiplier+1,f
  2667  010E  0CF0               	rrf	___wmul@multiplier,f
  2668  010F  3EFF               	addlw	-1
  2669  0110  1D03               	skipz
  2670  0111  290C               	goto	u1085
  2671  0112                     l1528:
  2672  0112  0870               	movf	___wmul@multiplier,w
  2673  0113  0471               	iorwf	___wmul@multiplier+1,w
  2674  0114  1D03               	btfss	3,2
  2675  0115  2917               	goto	u1091
  2676  0116  2918               	goto	u1090
  2677  0117                     u1091:
  2678  0117  28FA               	goto	l1522
  2679  0118                     u1090:
  2680  0118                     l1530:
  2681  0118  0875               	movf	___wmul@product+1,w
  2682  0119  00F1               	movwf	?___wmul+1
  2683  011A  0874               	movf	___wmul@product,w
  2684  011B  00F0               	movwf	?___wmul
  2685  011C                     l302:
  2686  011C  0008               	return
  2687  011D                     __end_of___wmul:
  2688                           
  2689                           	psect	text5
  2690  0FB0                     __ptext5:	
  2691 ;; *************** function _Sonar *****************
  2692 ;; Defined at:
  2693 ;;		line 26 in file "main.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;		None
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;		None
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      void 
  2700 ;; Registers used:
  2701 ;;		wreg
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2707 ;;      Params:         0       0       0       0       0
  2708 ;;      Locals:         0       0       0       0       0
  2709 ;;      Temps:          2       0       0       0       0
  2710 ;;      Totals:         2       0       0       0       0
  2711 ;;Total ram usage:        2 bytes
  2712 ;; Hardware stack levels used: 1
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		_main
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720  0FB0                     _Sonar:	
  2721                           ;psect for function _Sonar
  2722                           
  2723  0FB0                     l1410:	
  2724                           ;incstack = 0
  2725                           ; Regs used in _Sonar: [wreg]
  2726                           
  2727                           
  2728                           ;main.c: 27:     RC2 = 1;
  2729  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0FB2  1507               	bsf	7,2	;volatile
  2732  0FB3                     l1412:
  2733                           
  2734                           ;main.c: 28:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2735  0FB3  3082               	movlw	130
  2736  0FB4  00F1               	movwf	??_Sonar+1
  2737  0FB5  30DD               	movlw	221
  2738  0FB6  00F0               	movwf	??_Sonar
  2739  0FB7                     u1357:
  2740  0FB7  0BF0               	decfsz	??_Sonar,f
  2741  0FB8  2FB7               	goto	u1357
  2742  0FB9  0BF1               	decfsz	??_Sonar+1,f
  2743  0FBA  2FB7               	goto	u1357
  2744  0FBB  2FBC               	nop2
  2745  0FBC                     l1414:
  2746                           
  2747                           ;main.c: 29:     RC2=0;
  2748  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
  2749  0FBD  1303               	bcf	3,6	;RP1=0, select bank0
  2750  0FBE  1107               	bcf	7,2	;volatile
  2751                           
  2752                           ;main.c: 30:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2753  0FBF  3082               	movlw	130
  2754  0FC0  00F1               	movwf	??_Sonar+1
  2755  0FC1  30DD               	movlw	221
  2756  0FC2  00F0               	movwf	??_Sonar
  2757  0FC3                     u1367:
  2758  0FC3  0BF0               	decfsz	??_Sonar,f
  2759  0FC4  2FC3               	goto	u1367
  2760  0FC5  0BF1               	decfsz	??_Sonar+1,f
  2761  0FC6  2FC3               	goto	u1367
  2762  0FC7  2FC8               	nop2
  2763  0FC8                     l102:
  2764  0FC8  0008               	return
  2765  0FC9                     __end_of_Sonar:
  2766                           
  2767                           	psect	text6
  2768  00C5                     __ptext6:	
  2769 ;; *************** function _Prender_Verde *****************
  2770 ;; Defined at:
  2771 ;;		line 14 in file "main.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		None
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2785 ;;      Params:         0       0       0       0       0
  2786 ;;      Locals:         0       0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0
  2788 ;;      Totals:         0       0       0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used: 1
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_main
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798  00C5                     _Prender_Verde:	
  2799                           ;psect for function _Prender_Verde
  2800                           
  2801  00C5                     l1402:	
  2802                           ;incstack = 0
  2803                           ; Regs used in _Prender_Verde: []
  2804                           
  2805                           
  2806                           ;main.c: 15:     RC0 = 1;
  2807  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  2808  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  2809  00C7  1407               	bsf	7,0	;volatile
  2810  00C8                     l90:
  2811  00C8  0008               	return
  2812  00C9                     __end_of_Prender_Verde:
  2813                           
  2814                           	psect	text7
  2815  0FA4                     __ptext7:	
  2816 ;; *************** function _Prender_Rojo *****************
  2817 ;; Defined at:
  2818 ;;		line 20 in file "main.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;		None
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;		None
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      void 
  2825 ;; Registers used:
  2826 ;;		None
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2832 ;;      Params:         0       0       0       0       0
  2833 ;;      Locals:         0       0       0       0       0
  2834 ;;      Temps:          0       0       0       0       0
  2835 ;;      Totals:         0       0       0       0       0
  2836 ;;Total ram usage:        0 bytes
  2837 ;; Hardware stack levels used: 1
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_main
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845  0FA4                     _Prender_Rojo:	
  2846                           ;psect for function _Prender_Rojo
  2847                           
  2848  0FA4                     l1406:	
  2849                           ;incstack = 0
  2850                           ; Regs used in _Prender_Rojo: []
  2851                           
  2852                           
  2853                           ;main.c: 21:     RC1 = 1;
  2854  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  2855  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  2856  0FA6  1487               	bsf	7,1	;volatile
  2857  0FA7                     l96:
  2858  0FA7  0008               	return
  2859  0FA8                     __end_of_Prender_Rojo:
  2860                           
  2861                           	psect	text8
  2862  02C3                     __ptext8:	
  2863 ;; *************** function _Leer_tecla *****************
  2864 ;; Defined at:
  2865 ;;		line 13 in file "teclado.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      unsigned char 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2879 ;;      Params:         0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0
  2881 ;;      Temps:          2       0       0       0       0
  2882 ;;      Totals:         2       0       0       0       0
  2883 ;;Total ram usage:        2 bytes
  2884 ;; Hardware stack levels used: 1
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_main
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892  02C3                     _Leer_tecla:	
  2893                           ;psect for function _Leer_tecla
  2894                           
  2895  02C3                     l1422:	
  2896                           ;incstack = 0
  2897                           ; Regs used in _Leer_tecla: [wreg+status,2]
  2898                           
  2899                           
  2900                           ;teclado.c: 15:     x=100;
  2901  02C3  3064               	movlw	100
  2902  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  2903  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  2904  02C6  00C5               	movwf	_x
  2905  02C7  3000               	movlw	0
  2906  02C8  00C6               	movwf	_x+1
  2907                           
  2908                           ;teclado.c: 17:       PORTB=1;
  2909  02C9  3001               	movlw	1
  2910  02CA  0086               	movwf	6	;volatile
  2911                           
  2912                           ;teclado.c: 18:       _delay((unsigned long)((10)*(4000000/4000.0)));
  2913  02CB  300D               	movlw	13
  2914  02CC  00F1               	movwf	??_Leer_tecla+1
  2915  02CD  30FB               	movlw	251
  2916  02CE  00F0               	movwf	??_Leer_tecla
  2917  02CF                     u1377:
  2918  02CF  0BF0               	decfsz	??_Leer_tecla,f
  2919  02D0  2ACF               	goto	u1377
  2920  02D1  0BF1               	decfsz	??_Leer_tecla+1,f
  2921  02D2  2ACF               	goto	u1377
  2922  02D3  2AD4               	nop2
  2923  02D4                     l1424:
  2924                           
  2925                           ;teclado.c: 19:       if (RB4) {
  2926  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2927  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  2928  02D6  1E06               	btfss	6,4	;volatile
  2929  02D7  2AD9               	goto	u871
  2930  02D8  2ADA               	goto	u870
  2931  02D9                     u871:
  2932  02D9  2ADF               	goto	l166
  2933  02DA                     u870:
  2934  02DA                     l1426:
  2935                           
  2936                           ;teclado.c: 20:           x = 1;
  2937  02DA  3001               	movlw	1
  2938  02DB  00C5               	movwf	_x
  2939  02DC  3000               	movlw	0
  2940  02DD  00C6               	movwf	_x+1
  2941                           
  2942                           ;teclado.c: 21:       }
  2943  02DE  2AF0               	goto	l167
  2944  02DF                     l166:	
  2945                           ;teclado.c: 22:       else if (RB5) {
  2946                           
  2947  02DF  1E86               	btfss	6,5	;volatile
  2948  02E0  2AE2               	goto	u881
  2949  02E1  2AE3               	goto	u880
  2950  02E2                     u881:
  2951  02E2  2AE8               	goto	l168
  2952  02E3                     u880:
  2953  02E3                     l1428:
  2954                           
  2955                           ;teclado.c: 23:           x = 2;
  2956  02E3  3002               	movlw	2
  2957  02E4  00C5               	movwf	_x
  2958  02E5  3000               	movlw	0
  2959  02E6  00C6               	movwf	_x+1
  2960                           
  2961                           ;teclado.c: 24:       }
  2962  02E7  2AF0               	goto	l167
  2963  02E8                     l168:	
  2964                           ;teclado.c: 25:       else if (RB6) {
  2965                           
  2966  02E8  1F06               	btfss	6,6	;volatile
  2967  02E9  2AEB               	goto	u891
  2968  02EA  2AEC               	goto	u890
  2969  02EB                     u891:
  2970  02EB  2AF0               	goto	l167
  2971  02EC                     u890:
  2972  02EC                     l1430:
  2973                           
  2974                           ;teclado.c: 26:           x = 3;
  2975  02EC  3003               	movlw	3
  2976  02ED  00C5               	movwf	_x
  2977  02EE  3000               	movlw	0
  2978  02EF  00C6               	movwf	_x+1
  2979  02F0                     l167:
  2980                           
  2981                           ;teclado.c: 28:       PORTB=2;
  2982  02F0  3002               	movlw	2
  2983  02F1  0086               	movwf	6	;volatile
  2984                           
  2985                           ;teclado.c: 29:       _delay((unsigned long)((10)*(4000000/4000.0)));
  2986  02F2  300D               	movlw	13
  2987  02F3  00F1               	movwf	??_Leer_tecla+1
  2988  02F4  30FB               	movlw	251
  2989  02F5  00F0               	movwf	??_Leer_tecla
  2990  02F6                     u1387:
  2991  02F6  0BF0               	decfsz	??_Leer_tecla,f
  2992  02F7  2AF6               	goto	u1387
  2993  02F8  0BF1               	decfsz	??_Leer_tecla+1,f
  2994  02F9  2AF6               	goto	u1387
  2995  02FA  2AFB               	nop2
  2996  02FB                     l1432:
  2997                           
  2998                           ;teclado.c: 30:       if (RB4) {
  2999  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  3000  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  3001  02FD  1E06               	btfss	6,4	;volatile
  3002  02FE  2B00               	goto	u901
  3003  02FF  2B01               	goto	u900
  3004  0300                     u901:
  3005  0300  2B06               	goto	l171
  3006  0301                     u900:
  3007  0301                     l1434:
  3008                           
  3009                           ;teclado.c: 31:           x = 4;
  3010  0301  3004               	movlw	4
  3011  0302  00C5               	movwf	_x
  3012  0303  3000               	movlw	0
  3013  0304  00C6               	movwf	_x+1
  3014                           
  3015                           ;teclado.c: 32:       }
  3016  0305  2B17               	goto	l172
  3017  0306                     l171:	
  3018                           ;teclado.c: 33:       else if (RB5) {
  3019                           
  3020  0306  1E86               	btfss	6,5	;volatile
  3021  0307  2B09               	goto	u911
  3022  0308  2B0A               	goto	u910
  3023  0309                     u911:
  3024  0309  2B0F               	goto	l173
  3025  030A                     u910:
  3026  030A                     l1436:
  3027                           
  3028                           ;teclado.c: 34:           x = 5;
  3029  030A  3005               	movlw	5
  3030  030B  00C5               	movwf	_x
  3031  030C  3000               	movlw	0
  3032  030D  00C6               	movwf	_x+1
  3033                           
  3034                           ;teclado.c: 35:       }
  3035  030E  2B17               	goto	l172
  3036  030F                     l173:	
  3037                           ;teclado.c: 36:       else if (RB6) {
  3038                           
  3039  030F  1F06               	btfss	6,6	;volatile
  3040  0310  2B12               	goto	u921
  3041  0311  2B13               	goto	u920
  3042  0312                     u921:
  3043  0312  2B17               	goto	l172
  3044  0313                     u920:
  3045  0313                     l1438:
  3046                           
  3047                           ;teclado.c: 37:           x = 6;
  3048  0313  3006               	movlw	6
  3049  0314  00C5               	movwf	_x
  3050  0315  3000               	movlw	0
  3051  0316  00C6               	movwf	_x+1
  3052  0317                     l172:
  3053                           
  3054                           ;teclado.c: 39:       PORTB=4;
  3055  0317  3004               	movlw	4
  3056  0318  0086               	movwf	6	;volatile
  3057                           
  3058                           ;teclado.c: 40:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3059  0319  300D               	movlw	13
  3060  031A  00F1               	movwf	??_Leer_tecla+1
  3061  031B  30FB               	movlw	251
  3062  031C  00F0               	movwf	??_Leer_tecla
  3063  031D                     u1397:
  3064  031D  0BF0               	decfsz	??_Leer_tecla,f
  3065  031E  2B1D               	goto	u1397
  3066  031F  0BF1               	decfsz	??_Leer_tecla+1,f
  3067  0320  2B1D               	goto	u1397
  3068  0321  2B22               	nop2
  3069  0322                     l1440:
  3070                           
  3071                           ;teclado.c: 41:       if (RB4) {
  3072  0322  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0323  1303               	bcf	3,6	;RP1=0, select bank0
  3074  0324  1E06               	btfss	6,4	;volatile
  3075  0325  2B27               	goto	u931
  3076  0326  2B28               	goto	u930
  3077  0327                     u931:
  3078  0327  2B2D               	goto	l176
  3079  0328                     u930:
  3080  0328                     l1442:
  3081                           
  3082                           ;teclado.c: 42:           x = 7;
  3083  0328  3007               	movlw	7
  3084  0329  00C5               	movwf	_x
  3085  032A  3000               	movlw	0
  3086  032B  00C6               	movwf	_x+1
  3087                           
  3088                           ;teclado.c: 43:       }
  3089  032C  2B3E               	goto	l177
  3090  032D                     l176:	
  3091                           ;teclado.c: 44:       else if (RB5) {
  3092                           
  3093  032D  1E86               	btfss	6,5	;volatile
  3094  032E  2B30               	goto	u941
  3095  032F  2B31               	goto	u940
  3096  0330                     u941:
  3097  0330  2B36               	goto	l178
  3098  0331                     u940:
  3099  0331                     l1444:
  3100                           
  3101                           ;teclado.c: 45:           x = 8;
  3102  0331  3008               	movlw	8
  3103  0332  00C5               	movwf	_x
  3104  0333  3000               	movlw	0
  3105  0334  00C6               	movwf	_x+1
  3106                           
  3107                           ;teclado.c: 46:       }
  3108  0335  2B3E               	goto	l177
  3109  0336                     l178:	
  3110                           ;teclado.c: 47:       else if (RB6) {
  3111                           
  3112  0336  1F06               	btfss	6,6	;volatile
  3113  0337  2B39               	goto	u951
  3114  0338  2B3A               	goto	u950
  3115  0339                     u951:
  3116  0339  2B3E               	goto	l177
  3117  033A                     u950:
  3118  033A                     l1446:
  3119                           
  3120                           ;teclado.c: 48:           x = 9;
  3121  033A  3009               	movlw	9
  3122  033B  00C5               	movwf	_x
  3123  033C  3000               	movlw	0
  3124  033D  00C6               	movwf	_x+1
  3125  033E                     l177:
  3126                           
  3127                           ;teclado.c: 50:       PORTB=8;
  3128  033E  3008               	movlw	8
  3129  033F  0086               	movwf	6	;volatile
  3130                           
  3131                           ;teclado.c: 51:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3132  0340  300D               	movlw	13
  3133  0341  00F1               	movwf	??_Leer_tecla+1
  3134  0342  30FB               	movlw	251
  3135  0343  00F0               	movwf	??_Leer_tecla
  3136  0344                     u1407:
  3137  0344  0BF0               	decfsz	??_Leer_tecla,f
  3138  0345  2B44               	goto	u1407
  3139  0346  0BF1               	decfsz	??_Leer_tecla+1,f
  3140  0347  2B44               	goto	u1407
  3141  0348  2B49               	nop2
  3142  0349                     l1448:
  3143                           
  3144                           ;teclado.c: 52:       if (RB4) {
  3145  0349  1283               	bcf	3,5	;RP0=0, select bank0
  3146  034A  1303               	bcf	3,6	;RP1=0, select bank0
  3147  034B  1E06               	btfss	6,4	;volatile
  3148  034C  2B4E               	goto	u961
  3149  034D  2B4F               	goto	u960
  3150  034E                     u961:
  3151  034E  2B54               	goto	l181
  3152  034F                     u960:
  3153  034F                     l1450:
  3154                           
  3155                           ;teclado.c: 53:           x = 42;
  3156  034F  302A               	movlw	42
  3157  0350  00C5               	movwf	_x
  3158  0351  3000               	movlw	0
  3159  0352  00C6               	movwf	_x+1
  3160                           
  3161                           ;teclado.c: 54:       }
  3162  0353  2B63               	goto	l182
  3163  0354                     l181:	
  3164                           ;teclado.c: 55:       else if (RB5) {
  3165                           
  3166  0354  1E86               	btfss	6,5	;volatile
  3167  0355  2B57               	goto	u971
  3168  0356  2B58               	goto	u970
  3169  0357                     u971:
  3170  0357  2B5B               	goto	l183
  3171  0358                     u970:
  3172  0358                     l1452:
  3173                           
  3174                           ;teclado.c: 56:           x = 0;
  3175  0358  01C5               	clrf	_x
  3176  0359  01C6               	clrf	_x+1
  3177                           
  3178                           ;teclado.c: 57:       }
  3179  035A  2B63               	goto	l182
  3180  035B                     l183:	
  3181                           ;teclado.c: 58:       else if (RB6) {
  3182                           
  3183  035B  1F06               	btfss	6,6	;volatile
  3184  035C  2B5E               	goto	u981
  3185  035D  2B5F               	goto	u980
  3186  035E                     u981:
  3187  035E  2B63               	goto	l182
  3188  035F                     u980:
  3189  035F                     l1454:
  3190                           
  3191                           ;teclado.c: 59:           x = 35;
  3192  035F  3023               	movlw	35
  3193  0360  00C5               	movwf	_x
  3194  0361  3000               	movlw	0
  3195  0362  00C6               	movwf	_x+1
  3196  0363                     l182:
  3197                           
  3198                           ;teclado.c: 61:     return x;
  3199  0363  0845               	movf	_x,w
  3200  0364                     l186:
  3201  0364  0008               	return
  3202  0365                     __end_of_Leer_tecla:
  3203                           
  3204                           	psect	text9
  3205  018E                     __ptext9:	
  3206 ;; *************** function _Lcd_Write_String *****************
  3207 ;; Defined at:
  3208 ;;		line 105 in file "lcd.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  a               2    5[COMMON] PTR unsigned char 
  3211 ;;		 -> STR_15(9), STR_14(14), STR_13(8), STR_12(10), 
  3212 ;;		 -> STR_11(10), STR_10(9), STR_9(6), STR_8(8), 
  3213 ;;		 -> STR_7(10), main@Cadena(20), STR_2(12), STR_1(10), 
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  i               2   10[COMMON] int 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  1    wreg      void 
  3218 ;; Registers used:
  3219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3225 ;;      Params:         2       0       0       0       0
  3226 ;;      Locals:         2       0       0       0       0
  3227 ;;      Temps:          3       0       0       0       0
  3228 ;;      Totals:         7       0       0       0       0
  3229 ;;Total ram usage:        7 bytes
  3230 ;; Hardware stack levels used: 1
  3231 ;; Hardware stack levels required when called: 2
  3232 ;; This function calls:
  3233 ;;		_Lcd_Write_Char
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239  018E                     _Lcd_Write_String:	
  3240                           ;psect for function _Lcd_Write_String
  3241                           
  3242  018E                     l1394:	
  3243                           ;incstack = 0
  3244                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3245                           
  3246                           
  3247                           ;lcd.c: 105: void Lcd_Write_String(char *a);lcd.c: 106: {;lcd.c: 107:  int i;;lcd.c: 108
      +                          :  for(i=0;a[i]!='\0';i++)
  3248  018E  01FA               	clrf	Lcd_Write_String@i
  3249  018F  01FB               	clrf	Lcd_Write_String@i+1
  3250  0190  29B3               	goto	l1400
  3251  0191                     l1396:
  3252                           
  3253                           ;lcd.c: 109:     Lcd_Write_Char(a[i]);
  3254  0191  087A               	movf	Lcd_Write_String@i,w
  3255  0192  0775               	addwf	Lcd_Write_String@a,w
  3256  0193  00F8               	movwf	??_Lcd_Write_String+1
  3257  0194  0876               	movf	Lcd_Write_String@a+1,w
  3258  0195  00F7               	movwf	??_Lcd_Write_String
  3259  0196  1803               	skipnc
  3260  0197  0AF7               	incf	??_Lcd_Write_String,f
  3261  0198  1FFA               	btfss	Lcd_Write_String@i,7
  3262  0199  299B               	goto	u840
  3263  019A  03F7               	decf	??_Lcd_Write_String,f
  3264  019B                     u840:
  3265  019B  0877               	movf	??_Lcd_Write_String,w
  3266  019C  00F9               	movwf	??_Lcd_Write_String+2
  3267  019D  0879               	movf	??_Lcd_Write_String+2,w
  3268  019E  1283               	bcf	3,5	;RP0=0, select bank0
  3269  019F  1303               	bcf	3,6	;RP1=0, select bank0
  3270  01A0  00FF               	movwf	btemp+1
  3271  01A1  0878               	movf	??_Lcd_Write_String+1,w
  3272  01A2  0084               	movwf	4
  3273  01A3  120A  118A  2003  120A  118A  	fcall	stringtab
  3274  01A8  120A  118A  211D  120A  118A  	fcall	_Lcd_Write_Char
  3275  01AD                     l1398:
  3276  01AD  3001               	movlw	1
  3277  01AE  07FA               	addwf	Lcd_Write_String@i,f
  3278  01AF  1803               	skipnc
  3279  01B0  0AFB               	incf	Lcd_Write_String@i+1,f
  3280  01B1  3000               	movlw	0
  3281  01B2  07FB               	addwf	Lcd_Write_String@i+1,f
  3282  01B3                     l1400:
  3283  01B3  087A               	movf	Lcd_Write_String@i,w
  3284  01B4  0775               	addwf	Lcd_Write_String@a,w
  3285  01B5  00F8               	movwf	??_Lcd_Write_String+1
  3286  01B6  0876               	movf	Lcd_Write_String@a+1,w
  3287  01B7  00F7               	movwf	??_Lcd_Write_String
  3288  01B8  1803               	skipnc
  3289  01B9  0AF7               	incf	??_Lcd_Write_String,f
  3290  01BA  1FFA               	btfss	Lcd_Write_String@i,7
  3291  01BB  29BD               	goto	u850
  3292  01BC  03F7               	decf	??_Lcd_Write_String,f
  3293  01BD                     u850:
  3294  01BD  0877               	movf	??_Lcd_Write_String,w
  3295  01BE  00F9               	movwf	??_Lcd_Write_String+2
  3296  01BF  0879               	movf	??_Lcd_Write_String+2,w
  3297  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  3298  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  3299  01C2  00FF               	movwf	btemp+1
  3300  01C3  0878               	movf	??_Lcd_Write_String+1,w
  3301  01C4  0084               	movwf	4
  3302  01C5  120A  118A  2003  120A  118A  	fcall	stringtab
  3303  01CA  3A00               	xorlw	0
  3304  01CB  1D03               	skipz
  3305  01CC  29CE               	goto	u861
  3306  01CD  29CF               	goto	u860
  3307  01CE                     u861:
  3308  01CE  2991               	goto	l1396
  3309  01CF                     u860:
  3310  01CF                     l49:
  3311  01CF  0008               	return
  3312  01D0                     __end_of_Lcd_Write_String:
  3313                           
  3314                           	psect	text10
  3315  011D                     __ptext10:	
  3316 ;; *************** function _Lcd_Write_Char *****************
  3317 ;; Defined at:
  3318 ;;		line 89 in file "lcd.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  a               1    wreg     unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  a               1    4[COMMON] unsigned char 
  3323 ;;  y               1    3[COMMON] unsigned char 
  3324 ;;  temp            1    2[COMMON] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  1    wreg      void 
  3327 ;; Registers used:
  3328 ;;		wreg, status,2, status,0, pclath, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3334 ;;      Params:         0       0       0       0       0
  3335 ;;      Locals:         3       0       0       0       0
  3336 ;;      Temps:          1       0       0       0       0
  3337 ;;      Totals:         4       0       0       0       0
  3338 ;;Total ram usage:        4 bytes
  3339 ;; Hardware stack levels used: 1
  3340 ;; Hardware stack levels required when called: 1
  3341 ;; This function calls:
  3342 ;;		_Lcd_Port
  3343 ;; This function is called by:
  3344 ;;		_Lcd_Write_String
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348  011D                     _Lcd_Write_Char:	
  3349                           ;psect for function _Lcd_Write_Char
  3350                           
  3351                           
  3352                           ;incstack = 0
  3353                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3354                           ;Lcd_Write_Char@a stored from wreg
  3355  011D  00F4               	movwf	Lcd_Write_Char@a
  3356  011E                     l1294:
  3357                           
  3358                           ;lcd.c: 89: void Lcd_Write_Char(char a);lcd.c: 90: {;lcd.c: 91:    char temp,y;;lcd.c: 9
      +                          2:    temp = a&0x0F;
  3359  011E  0874               	movf	Lcd_Write_Char@a,w
  3360  011F  390F               	andlw	15
  3361  0120  00F1               	movwf	??_Lcd_Write_Char
  3362  0121  0871               	movf	??_Lcd_Write_Char,w
  3363  0122  00F2               	movwf	Lcd_Write_Char@temp
  3364                           
  3365                           ;lcd.c: 93:    y = a&0xF0;
  3366  0123  0874               	movf	Lcd_Write_Char@a,w
  3367  0124  39F0               	andlw	240
  3368  0125  00F1               	movwf	??_Lcd_Write_Char
  3369  0126  0871               	movf	??_Lcd_Write_Char,w
  3370  0127  00F3               	movwf	Lcd_Write_Char@y
  3371  0128                     l1296:
  3372                           
  3373                           ;lcd.c: 94:    RD2 = 1;
  3374  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3375  0129  1303               	bcf	3,6	;RP1=0, select bank0
  3376  012A  1508               	bsf	8,2	;volatile
  3377  012B                     l1298:
  3378                           
  3379                           ;lcd.c: 95:    Lcd_Port(y>>4);
  3380  012B  0873               	movf	Lcd_Write_Char@y,w
  3381  012C  00F1               	movwf	??_Lcd_Write_Char
  3382  012D  3004               	movlw	4
  3383  012E                     u665:
  3384  012E  1003               	clrc
  3385  012F  0CF1               	rrf	??_Lcd_Write_Char,f
  3386  0130  3EFF               	addlw	-1
  3387  0131  1D03               	skipz
  3388  0132  292E               	goto	u665
  3389  0133  0871               	movf	??_Lcd_Write_Char,w
  3390  0134  120A  118A  20D6  120A  118A  	fcall	_Lcd_Port
  3391  0139                     l1300:
  3392                           
  3393                           ;lcd.c: 96:    RD3 = 1;
  3394  0139  1283               	bcf	3,5	;RP0=0, select bank0
  3395  013A  1303               	bcf	3,6	;RP1=0, select bank0
  3396  013B  1588               	bsf	8,3	;volatile
  3397  013C                     l1302:
  3398                           
  3399                           ;lcd.c: 97:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  3400  013C  300D               	movlw	13
  3401  013D  00F1               	movwf	??_Lcd_Write_Char
  3402  013E                     u1417:
  3403  013E  0BF1               	decfsz	??_Lcd_Write_Char,f
  3404  013F  293E               	goto	u1417
  3405  0140                     l1304:
  3406                           
  3407                           ;lcd.c: 98:    RD3 = 0;
  3408  0140  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0141  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0142  1188               	bcf	8,3	;volatile
  3411  0143                     l1306:
  3412                           
  3413                           ;lcd.c: 99:    Lcd_Port(temp);
  3414  0143  0872               	movf	Lcd_Write_Char@temp,w
  3415  0144  120A  118A  20D6  120A  118A  	fcall	_Lcd_Port
  3416  0149                     l1308:
  3417                           
  3418                           ;lcd.c: 100:    RD3 = 1;
  3419  0149  1283               	bcf	3,5	;RP0=0, select bank0
  3420  014A  1303               	bcf	3,6	;RP1=0, select bank0
  3421  014B  1588               	bsf	8,3	;volatile
  3422  014C                     l1310:
  3423                           
  3424                           ;lcd.c: 101:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  3425  014C  300D               	movlw	13
  3426  014D  00F1               	movwf	??_Lcd_Write_Char
  3427  014E                     u1427:
  3428  014E  0BF1               	decfsz	??_Lcd_Write_Char,f
  3429  014F  294E               	goto	u1427
  3430  0150                     l1312:
  3431                           
  3432                           ;lcd.c: 102:    RD3 = 0;
  3433  0150  1283               	bcf	3,5	;RP0=0, select bank0
  3434  0151  1303               	bcf	3,6	;RP1=0, select bank0
  3435  0152  1188               	bcf	8,3	;volatile
  3436  0153                     l43:
  3437  0153  0008               	return
  3438  0154                     __end_of_Lcd_Write_Char:
  3439                           
  3440                           	psect	text11
  3441  0214                     __ptext11:	
  3442 ;; *************** function _Lcd_Set_Cursor *****************
  3443 ;; Defined at:
  3444 ;;		line 49 in file "lcd.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  a               1    wreg     unsigned char 
  3447 ;;  b               1    4[COMMON] unsigned char 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  a               1    7[COMMON] unsigned char 
  3450 ;;  temp            1   10[COMMON] unsigned char 
  3451 ;;  y               1    9[COMMON] unsigned char 
  3452 ;;  z               1    8[COMMON] unsigned char 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3462 ;;      Params:         1       0       0       0       0
  3463 ;;      Locals:         4       0       0       0       0
  3464 ;;      Temps:          2       0       0       0       0
  3465 ;;      Totals:         7       0       0       0       0
  3466 ;;Total ram usage:        7 bytes
  3467 ;; Hardware stack levels used: 1
  3468 ;; Hardware stack levels required when called: 2
  3469 ;; This function calls:
  3470 ;;		_Lcd_Cmd
  3471 ;; This function is called by:
  3472 ;;		_main
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476  0214                     _Lcd_Set_Cursor:	
  3477                           ;psect for function _Lcd_Set_Cursor
  3478                           
  3479                           
  3480                           ;incstack = 0
  3481                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3482                           ;Lcd_Set_Cursor@a stored from wreg
  3483  0214  00F7               	movwf	Lcd_Set_Cursor@a
  3484  0215                     l1364:
  3485                           
  3486                           ;lcd.c: 49: void Lcd_Set_Cursor(char a, char b);lcd.c: 50: {;lcd.c: 51:  char temp,z,y;;
      +                          lcd.c: 52:  if(a == 1)
  3487  0215  0377               	decf	Lcd_Set_Cursor@a,w
  3488  0216  1D03               	btfss	3,2
  3489  0217  2A19               	goto	u801
  3490  0218  2A1A               	goto	u800
  3491  0219                     u801:
  3492  0219  2A3D               	goto	l1374
  3493  021A                     u800:
  3494  021A                     l1366:
  3495                           
  3496                           ;lcd.c: 53:  {;lcd.c: 54:    temp = 0x80 + b - 1;
  3497  021A  0874               	movf	Lcd_Set_Cursor@b,w
  3498  021B  3E7F               	addlw	127
  3499  021C  00F5               	movwf	??_Lcd_Set_Cursor
  3500  021D  0875               	movf	??_Lcd_Set_Cursor,w
  3501  021E  00FA               	movwf	Lcd_Set_Cursor@temp
  3502                           
  3503                           ;lcd.c: 55:   z = temp>>4;
  3504  021F  087A               	movf	Lcd_Set_Cursor@temp,w
  3505  0220  00F5               	movwf	??_Lcd_Set_Cursor
  3506  0221  3004               	movlw	4
  3507  0222                     u815:
  3508  0222  1003               	clrc
  3509  0223  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3510  0224  3EFF               	addlw	-1
  3511  0225  1D03               	skipz
  3512  0226  2A22               	goto	u815
  3513  0227  0875               	movf	??_Lcd_Set_Cursor,w
  3514  0228  00F6               	movwf	??_Lcd_Set_Cursor+1
  3515  0229  0876               	movf	??_Lcd_Set_Cursor+1,w
  3516  022A  00F8               	movwf	Lcd_Set_Cursor@z
  3517  022B                     l1368:
  3518                           
  3519                           ;lcd.c: 56:   y = temp & 0x0F;
  3520  022B  087A               	movf	Lcd_Set_Cursor@temp,w
  3521  022C  390F               	andlw	15
  3522  022D  00F5               	movwf	??_Lcd_Set_Cursor
  3523  022E  0875               	movf	??_Lcd_Set_Cursor,w
  3524  022F  00F9               	movwf	Lcd_Set_Cursor@y
  3525  0230                     l1370:
  3526                           
  3527                           ;lcd.c: 57:   Lcd_Cmd(z);
  3528  0230  0878               	movf	Lcd_Set_Cursor@z,w
  3529  0231  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3530  0236                     l1372:
  3531                           
  3532                           ;lcd.c: 58:   Lcd_Cmd(y);
  3533  0236  0879               	movf	Lcd_Set_Cursor@y,w
  3534  0237  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3535                           
  3536                           ;lcd.c: 59:  }
  3537  023C  2A65               	goto	l37
  3538  023D                     l1374:
  3539  023D  3002               	movlw	2
  3540  023E  0677               	xorwf	Lcd_Set_Cursor@a,w
  3541  023F  1D03               	btfss	3,2
  3542  0240  2A42               	goto	u821
  3543  0241  2A43               	goto	u820
  3544  0242                     u821:
  3545  0242  2A65               	goto	l37
  3546  0243                     u820:
  3547  0243                     l1376:
  3548                           
  3549                           ;lcd.c: 61:  {;lcd.c: 62:   temp = 0xC0 + b - 1;
  3550  0243  0874               	movf	Lcd_Set_Cursor@b,w
  3551  0244  3EBF               	addlw	191
  3552  0245  00F5               	movwf	??_Lcd_Set_Cursor
  3553  0246  0875               	movf	??_Lcd_Set_Cursor,w
  3554  0247  00FA               	movwf	Lcd_Set_Cursor@temp
  3555                           
  3556                           ;lcd.c: 63:   z = temp>>4;
  3557  0248  087A               	movf	Lcd_Set_Cursor@temp,w
  3558  0249  00F5               	movwf	??_Lcd_Set_Cursor
  3559  024A  3004               	movlw	4
  3560  024B                     u835:
  3561  024B  1003               	clrc
  3562  024C  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3563  024D  3EFF               	addlw	-1
  3564  024E  1D03               	skipz
  3565  024F  2A4B               	goto	u835
  3566  0250  0875               	movf	??_Lcd_Set_Cursor,w
  3567  0251  00F6               	movwf	??_Lcd_Set_Cursor+1
  3568  0252  0876               	movf	??_Lcd_Set_Cursor+1,w
  3569  0253  00F8               	movwf	Lcd_Set_Cursor@z
  3570  0254                     l1378:
  3571                           
  3572                           ;lcd.c: 64:   y = temp & 0x0F;
  3573  0254  087A               	movf	Lcd_Set_Cursor@temp,w
  3574  0255  390F               	andlw	15
  3575  0256  00F5               	movwf	??_Lcd_Set_Cursor
  3576  0257  0875               	movf	??_Lcd_Set_Cursor,w
  3577  0258  00F9               	movwf	Lcd_Set_Cursor@y
  3578  0259                     l1380:
  3579                           
  3580                           ;lcd.c: 65:   Lcd_Cmd(z);
  3581  0259  0878               	movf	Lcd_Set_Cursor@z,w
  3582  025A  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3583  025F                     l1382:
  3584                           
  3585                           ;lcd.c: 66:   Lcd_Cmd(y);
  3586  025F  0879               	movf	Lcd_Set_Cursor@y,w
  3587  0260  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3588  0265                     l37:
  3589  0265  0008               	return
  3590  0266                     __end_of_Lcd_Set_Cursor:
  3591                           
  3592                           	psect	text12
  3593  0266                     __ptext12:	
  3594 ;; *************** function _Lcd_Init *****************
  3595 ;; Defined at:
  3596 ;;		line 70 in file "lcd.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;		None
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;		None
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  1    wreg      void 
  3603 ;; Registers used:
  3604 ;;		wreg, status,2, status,0, pclath, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3610 ;;      Params:         0       0       0       0       0
  3611 ;;      Locals:         0       0       0       0       0
  3612 ;;      Temps:          2       0       0       0       0
  3613 ;;      Totals:         2       0       0       0       0
  3614 ;;Total ram usage:        2 bytes
  3615 ;; Hardware stack levels used: 1
  3616 ;; Hardware stack levels required when called: 2
  3617 ;; This function calls:
  3618 ;;		_Lcd_Cmd
  3619 ;;		_Lcd_Port
  3620 ;; This function is called by:
  3621 ;;		_main
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625  0266                     _Lcd_Init:	
  3626                           ;psect for function _Lcd_Init
  3627                           
  3628  0266                     l1384:	
  3629                           ;incstack = 0
  3630                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3631                           
  3632                           
  3633                           ;lcd.c: 72:   Lcd_Port(0x00);
  3634  0266  3000               	movlw	0
  3635  0267  120A  118A  20D6  120A  118A  	fcall	_Lcd_Port
  3636  026C                     l1386:
  3637                           
  3638                           ;lcd.c: 73:    _delay((unsigned long)((20)*(4000000/4000.0)));
  3639  026C  301A               	movlw	26
  3640  026D  00F5               	movwf	??_Lcd_Init+1
  3641  026E  30F8               	movlw	248
  3642  026F  00F4               	movwf	??_Lcd_Init
  3643  0270                     u1437:
  3644  0270  0BF4               	decfsz	??_Lcd_Init,f
  3645  0271  2A70               	goto	u1437
  3646  0272  0BF5               	decfsz	??_Lcd_Init+1,f
  3647  0273  2A70               	goto	u1437
  3648  0274  0000               	nop
  3649  0275                     l1388:
  3650                           
  3651                           ;lcd.c: 74:   Lcd_Cmd(0x03);
  3652  0275  3003               	movlw	3
  3653  0276  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3654                           
  3655                           ;lcd.c: 75:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3656  027B  3007               	movlw	7
  3657  027C  00F5               	movwf	??_Lcd_Init+1
  3658  027D  307D               	movlw	125
  3659  027E  00F4               	movwf	??_Lcd_Init
  3660  027F                     u1447:
  3661  027F  0BF4               	decfsz	??_Lcd_Init,f
  3662  0280  2A7F               	goto	u1447
  3663  0281  0BF5               	decfsz	??_Lcd_Init+1,f
  3664  0282  2A7F               	goto	u1447
  3665  0283                     l1390:
  3666                           
  3667                           ;lcd.c: 76:   Lcd_Cmd(0x03);
  3668  0283  3003               	movlw	3
  3669  0284  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3670  0289                     l1392:
  3671                           
  3672                           ;lcd.c: 77:  _delay((unsigned long)((11)*(4000000/4000.0)));
  3673  0289  300F               	movlw	15
  3674  028A  00F5               	movwf	??_Lcd_Init+1
  3675  028B  3047               	movlw	71
  3676  028C  00F4               	movwf	??_Lcd_Init
  3677  028D                     u1457:
  3678  028D  0BF4               	decfsz	??_Lcd_Init,f
  3679  028E  2A8D               	goto	u1457
  3680  028F  0BF5               	decfsz	??_Lcd_Init+1,f
  3681  0290  2A8D               	goto	u1457
  3682  0291  2A92               	nop2
  3683                           
  3684                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  3685  0292  3003               	movlw	3
  3686  0293  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3687                           
  3688                           ;lcd.c: 80:   Lcd_Cmd(0x02);
  3689  0298  3002               	movlw	2
  3690  0299  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3691                           
  3692                           ;lcd.c: 81:   Lcd_Cmd(0x02);
  3693  029E  3002               	movlw	2
  3694  029F  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3695                           
  3696                           ;lcd.c: 82:   Lcd_Cmd(0x08);
  3697  02A4  3008               	movlw	8
  3698  02A5  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3699                           
  3700                           ;lcd.c: 83:   Lcd_Cmd(0x00);
  3701  02AA  3000               	movlw	0
  3702  02AB  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3703                           
  3704                           ;lcd.c: 84:   Lcd_Cmd(0x0C);
  3705  02B0  300C               	movlw	12
  3706  02B1  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3707                           
  3708                           ;lcd.c: 85:   Lcd_Cmd(0x00);
  3709  02B6  3000               	movlw	0
  3710  02B7  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3711                           
  3712                           ;lcd.c: 86:   Lcd_Cmd(0x06);
  3713  02BC  3006               	movlw	6
  3714  02BD  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3715  02C2                     l40:
  3716  02C2  0008               	return
  3717  02C3                     __end_of_Lcd_Init:
  3718                           
  3719                           	psect	text13
  3720  00C9                     __ptext13:	
  3721 ;; *************** function _Lcd_Clear *****************
  3722 ;; Defined at:
  3723 ;;		line 43 in file "lcd.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, pclath, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3737 ;;      Params:         0       0       0       0       0
  3738 ;;      Locals:         0       0       0       0       0
  3739 ;;      Temps:          0       0       0       0       0
  3740 ;;      Totals:         0       0       0       0       0
  3741 ;;Total ram usage:        0 bytes
  3742 ;; Hardware stack levels used: 1
  3743 ;; Hardware stack levels required when called: 2
  3744 ;; This function calls:
  3745 ;;		_Lcd_Cmd
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751  00C9                     _Lcd_Clear:	
  3752                           ;psect for function _Lcd_Clear
  3753                           
  3754  00C9                     l1362:	
  3755                           ;incstack = 0
  3756                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3757                           
  3758                           
  3759                           ;lcd.c: 45:  Lcd_Cmd(0);
  3760  00C9  3000               	movlw	0
  3761  00CA  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3762                           
  3763                           ;lcd.c: 46:  Lcd_Cmd(1);
  3764  00CF  3001               	movlw	1
  3765  00D0  120A  158A  27C9  120A  118A  	fcall	_Lcd_Cmd
  3766  00D5                     l31:
  3767  00D5  0008               	return
  3768  00D6                     __end_of_Lcd_Clear:
  3769                           
  3770                           	psect	text14
  3771  0FC9                     __ptext14:	
  3772 ;; *************** function _Lcd_Cmd *****************
  3773 ;; Defined at:
  3774 ;;		line 34 in file "lcd.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  a               1    wreg     unsigned char 
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  a               1    3[COMMON] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, pclath, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3788 ;;      Params:         0       0       0       0       0
  3789 ;;      Locals:         1       0       0       0       0
  3790 ;;      Temps:          2       0       0       0       0
  3791 ;;      Totals:         3       0       0       0       0
  3792 ;;Total ram usage:        3 bytes
  3793 ;; Hardware stack levels used: 1
  3794 ;; Hardware stack levels required when called: 1
  3795 ;; This function calls:
  3796 ;;		_Lcd_Port
  3797 ;; This function is called by:
  3798 ;;		_Lcd_Clear
  3799 ;;		_Lcd_Set_Cursor
  3800 ;;		_Lcd_Init
  3801 ;;		_Lcd_Shift_Right
  3802 ;;		_Lcd_Shift_Left
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806  0FC9                     _Lcd_Cmd:	
  3807                           ;psect for function _Lcd_Cmd
  3808                           
  3809                           
  3810                           ;incstack = 0
  3811                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3812                           ;Lcd_Cmd@a stored from wreg
  3813  0FC9  00F3               	movwf	Lcd_Cmd@a
  3814  0FCA                     l1284:
  3815                           
  3816                           ;lcd.c: 34: void Lcd_Cmd(char a);lcd.c: 35: {;lcd.c: 36:  RD2 = 0;
  3817  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  3818  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  3819  0FCC  1108               	bcf	8,2	;volatile
  3820  0FCD                     l1286:
  3821                           
  3822                           ;lcd.c: 37:  Lcd_Port(a);
  3823  0FCD  0873               	movf	Lcd_Cmd@a,w
  3824  0FCE  120A  118A  20D6  120A  158A  	fcall	_Lcd_Port
  3825  0FD3                     l1288:
  3826                           
  3827                           ;lcd.c: 38:  RD3 = 1;
  3828  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  3829  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  3830  0FD5  1588               	bsf	8,3	;volatile
  3831  0FD6                     l1290:
  3832                           
  3833                           ;lcd.c: 39:         _delay((unsigned long)((4)*(4000000/4000.0)));
  3834  0FD6  3006               	movlw	6
  3835  0FD7  00F2               	movwf	??_Lcd_Cmd+1
  3836  0FD8  3030               	movlw	48
  3837  0FD9  00F1               	movwf	??_Lcd_Cmd
  3838  0FDA                     u1467:
  3839  0FDA  0BF1               	decfsz	??_Lcd_Cmd,f
  3840  0FDB  2FDA               	goto	u1467
  3841  0FDC  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3842  0FDD  2FDA               	goto	u1467
  3843  0FDE  0000               	nop
  3844  0FDF                     l1292:
  3845                           
  3846                           ;lcd.c: 40:         RD3 = 0;
  3847  0FDF  1283               	bcf	3,5	;RP0=0, select bank0
  3848  0FE0  1303               	bcf	3,6	;RP1=0, select bank0
  3849  0FE1  1188               	bcf	8,3	;volatile
  3850  0FE2                     l28:
  3851  0FE2  0008               	return
  3852  0FE3                     __end_of_Lcd_Cmd:
  3853                           
  3854                           	psect	text15
  3855  00D6                     __ptext15:	
  3856 ;; *************** function _Lcd_Port *****************
  3857 ;; Defined at:
  3858 ;;		line 12 in file "lcd.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  a               1    wreg     unsigned char 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  a               1    0[COMMON] unsigned char 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3872 ;;      Params:         0       0       0       0       0
  3873 ;;      Locals:         1       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0
  3875 ;;      Totals:         1       0       0       0       0
  3876 ;;Total ram usage:        1 bytes
  3877 ;; Hardware stack levels used: 1
  3878 ;; This function calls:
  3879 ;;		Nothing
  3880 ;; This function is called by:
  3881 ;;		_Lcd_Cmd
  3882 ;;		_Lcd_Init
  3883 ;;		_Lcd_Write_Char
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887  00D6                     _Lcd_Port:	
  3888                           ;psect for function _Lcd_Port
  3889                           
  3890                           
  3891                           ;incstack = 0
  3892                           ; Regs used in _Lcd_Port: [wreg]
  3893                           ;Lcd_Port@a stored from wreg
  3894  00D6  00F0               	movwf	Lcd_Port@a
  3895  00D7                     l1274:
  3896                           
  3897                           ;lcd.c: 12: void Lcd_Port(char a);lcd.c: 13: {;lcd.c: 14:  if(a & 1)
  3898  00D7  1C70               	btfss	Lcd_Port@a,0
  3899  00D8  28DA               	goto	u621
  3900  00D9  28DB               	goto	u620
  3901  00DA                     u621:
  3902  00DA  28DF               	goto	l17
  3903  00DB                     u620:
  3904  00DB                     l1276:
  3905                           
  3906                           ;lcd.c: 15:   RD4 = 1;
  3907  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  3908  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  3909  00DD  1608               	bsf	8,4	;volatile
  3910  00DE  28E2               	goto	l18
  3911  00DF                     l17:	
  3912                           ;lcd.c: 16:  else
  3913                           
  3914                           
  3915                           ;lcd.c: 17:   RD4 = 0;
  3916  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  3917  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  3918  00E1  1208               	bcf	8,4	;volatile
  3919  00E2                     l18:
  3920                           
  3921                           ;lcd.c: 19:  if(a & 2)
  3922  00E2  1CF0               	btfss	Lcd_Port@a,1
  3923  00E3  28E5               	goto	u631
  3924  00E4  28E6               	goto	u630
  3925  00E5                     u631:
  3926  00E5  28E8               	goto	l19
  3927  00E6                     u630:
  3928  00E6                     l1278:
  3929                           
  3930                           ;lcd.c: 20:   RD5 = 1;
  3931  00E6  1688               	bsf	8,5	;volatile
  3932  00E7  28E9               	goto	l20
  3933  00E8                     l19:	
  3934                           ;lcd.c: 21:  else
  3935                           
  3936                           
  3937                           ;lcd.c: 22:   RD5 = 0;
  3938  00E8  1288               	bcf	8,5	;volatile
  3939  00E9                     l20:
  3940                           
  3941                           ;lcd.c: 24:  if(a & 4)
  3942  00E9  1D70               	btfss	Lcd_Port@a,2
  3943  00EA  28EC               	goto	u641
  3944  00EB  28ED               	goto	u640
  3945  00EC                     u641:
  3946  00EC  28EF               	goto	l21
  3947  00ED                     u640:
  3948  00ED                     l1280:
  3949                           
  3950                           ;lcd.c: 25:   RD6 = 1;
  3951  00ED  1708               	bsf	8,6	;volatile
  3952  00EE  28F0               	goto	l22
  3953  00EF                     l21:	
  3954                           ;lcd.c: 26:  else
  3955                           
  3956                           
  3957                           ;lcd.c: 27:   RD6 = 0;
  3958  00EF  1308               	bcf	8,6	;volatile
  3959  00F0                     l22:
  3960                           
  3961                           ;lcd.c: 29:  if(a & 8)
  3962  00F0  1DF0               	btfss	Lcd_Port@a,3
  3963  00F1  28F3               	goto	u651
  3964  00F2  28F4               	goto	u650
  3965  00F3                     u651:
  3966  00F3  28F6               	goto	l23
  3967  00F4                     u650:
  3968  00F4                     l1282:
  3969                           
  3970                           ;lcd.c: 30:   RD7 = 1;
  3971  00F4  1788               	bsf	8,7	;volatile
  3972  00F5  28F7               	goto	l25
  3973  00F6                     l23:	
  3974                           ;lcd.c: 31:  else
  3975                           
  3976                           
  3977                           ;lcd.c: 32:   RD7 = 0;
  3978  00F6  1388               	bcf	8,7	;volatile
  3979  00F7                     l25:
  3980  00F7  0008               	return
  3981  00F8                     __end_of_Lcd_Port:
  3982                           
  3983                           	psect	text16
  3984  0FE3                     __ptext16:	
  3985 ;; *************** function _Bloqueo *****************
  3986 ;; Defined at:
  3987 ;;		line 32 in file "main.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4001 ;;      Params:         0       0       0       0       0
  4002 ;;      Locals:         0       0       0       0       0
  4003 ;;      Temps:          3       0       0       0       0
  4004 ;;      Totals:         3       0       0       0       0
  4005 ;;Total ram usage:        3 bytes
  4006 ;; Hardware stack levels used: 1
  4007 ;; This function calls:
  4008 ;;		Nothing
  4009 ;; This function is called by:
  4010 ;;		_main
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014  0FE3                     _Bloqueo:	
  4015                           ;psect for function _Bloqueo
  4016                           
  4017  0FE3                     l1416:	
  4018                           ;incstack = 0
  4019                           ; Regs used in _Bloqueo: [wreg]
  4020                           
  4021                           
  4022                           ;main.c: 33:     RC2 = 1;
  4023  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  4024  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  4025  0FE5  1507               	bsf	7,2	;volatile
  4026  0FE6                     l1418:
  4027                           
  4028                           ;main.c: 34:     _delay((unsigned long)((1000)*(4000000/4000.0)));
  4029  0FE6  3006               	movlw	6
  4030  0FE7  00F2               	movwf	??_Bloqueo+2
  4031  0FE8  3013               	movlw	19
  4032  0FE9  00F1               	movwf	??_Bloqueo+1
  4033  0FEA  30AD               	movlw	173
  4034  0FEB  00F0               	movwf	??_Bloqueo
  4035  0FEC                     u1477:
  4036  0FEC  0BF0               	decfsz	??_Bloqueo,f
  4037  0FED  2FEC               	goto	u1477
  4038  0FEE  0BF1               	decfsz	??_Bloqueo+1,f
  4039  0FEF  2FEC               	goto	u1477
  4040  0FF0  0BF2               	decfsz	??_Bloqueo+2,f
  4041  0FF1  2FEC               	goto	u1477
  4042  0FF2  2FF3               	nop2
  4043  0FF3                     l1420:
  4044                           
  4045                           ;main.c: 35:     RC2=0;
  4046  0FF3  1283               	bcf	3,5	;RP0=0, select bank0
  4047  0FF4  1303               	bcf	3,6	;RP1=0, select bank0
  4048  0FF5  1107               	bcf	7,2	;volatile
  4049                           
  4050                           ;main.c: 36:     _delay((unsigned long)((100)*(4000000/4000.0)));
  4051  0FF6  3082               	movlw	130
  4052  0FF7  00F1               	movwf	??_Bloqueo+1
  4053  0FF8  30DD               	movlw	221
  4054  0FF9  00F0               	movwf	??_Bloqueo
  4055  0FFA                     u1487:
  4056  0FFA  0BF0               	decfsz	??_Bloqueo,f
  4057  0FFB  2FFA               	goto	u1487
  4058  0FFC  0BF1               	decfsz	??_Bloqueo+1,f
  4059  0FFD  2FFA               	goto	u1487
  4060  0FFE  2FFF               	nop2
  4061  0FFF                     l105:
  4062  0FFF  0008               	return
  4063  1000                     __end_of_Bloqueo:
  4064                           
  4065                           	psect	text17
  4066  0FA0                     __ptext17:	
  4067 ;; *************** function _Apagar_Verde *****************
  4068 ;; Defined at:
  4069 ;;		line 17 in file "main.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		None
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4083 ;;      Params:         0       0       0       0       0
  4084 ;;      Locals:         0       0       0       0       0
  4085 ;;      Temps:          0       0       0       0       0
  4086 ;;      Totals:         0       0       0       0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used: 1
  4089 ;; This function calls:
  4090 ;;		Nothing
  4091 ;; This function is called by:
  4092 ;;		_main
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096  0FA0                     _Apagar_Verde:	
  4097                           ;psect for function _Apagar_Verde
  4098                           
  4099  0FA0                     l1404:	
  4100                           ;incstack = 0
  4101                           ; Regs used in _Apagar_Verde: []
  4102                           
  4103                           
  4104                           ;main.c: 18:     RC0 = 0;
  4105  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  4106  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  4107  0FA2  1007               	bcf	7,0	;volatile
  4108  0FA3                     l93:
  4109  0FA3  0008               	return
  4110  0FA4                     __end_of_Apagar_Verde:
  4111                           
  4112                           	psect	text18
  4113  0F9C                     __ptext18:	
  4114 ;; *************** function _Apagar_Rojo *****************
  4115 ;; Defined at:
  4116 ;;		line 23 in file "main.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;		None
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  1    wreg      void 
  4123 ;; Registers used:
  4124 ;;		None
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4130 ;;      Params:         0       0       0       0       0
  4131 ;;      Locals:         0       0       0       0       0
  4132 ;;      Temps:          0       0       0       0       0
  4133 ;;      Totals:         0       0       0       0       0
  4134 ;;Total ram usage:        0 bytes
  4135 ;; Hardware stack levels used: 1
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143  0F9C                     _Apagar_Rojo:	
  4144                           ;psect for function _Apagar_Rojo
  4145                           
  4146  0F9C                     l1408:	
  4147                           ;incstack = 0
  4148                           ; Regs used in _Apagar_Rojo: []
  4149                           
  4150                           
  4151                           ;main.c: 24:     RC1 = 0;
  4152  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
  4153  0F9D  1303               	bcf	3,6	;RP1=0, select bank0
  4154  0F9E  1087               	bcf	7,1	;volatile
  4155  0F9F                     l99:
  4156  0F9F  0008               	return
  4157  0FA0                     __end_of_Apagar_Rojo:
  4158  007E                     btemp	set	126	;btemp
  4159  007E                     wtemp0	set	126
  4160                           
  4161                           	psect	config
  4162                           
  4163                           ;Config register CONFIG1 @ 0x2007
  4164                           ;	Oscillator Selection bits
  4165                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  4166                           ;	Watchdog Timer Enable bit
  4167                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4168                           ;	Power-up Timer Enable bit
  4169                           ;	PWRTE = OFF, PWRT disabled
  4170                           ;	RE3/MCLR pin function select bit
  4171                           ;	MCLRE = 0x1, unprogrammed default
  4172                           ;	Code Protection bit
  4173                           ;	CP = OFF, Program memory code protection is disabled
  4174                           ;	Data Code Protection bit
  4175                           ;	CPD = OFF, Data memory code protection is disabled
  4176                           ;	Brown Out Reset Selection bits
  4177                           ;	BOREN = ON, BOR enabled
  4178                           ;	Internal External Switchover bit
  4179                           ;	IESO = 0x1, unprogrammed default
  4180                           ;	Fail-Safe Clock Monitor Enabled bit
  4181                           ;	FCMEN = 0x1, unprogrammed default
  4182                           ;	Low Voltage Programming Enable bit
  4183                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4184                           ;	In-Circuit Debugger Mode bit
  4185                           ;	DEBUG = 0x1, unprogrammed default
  4186  2007                     	org	8199
  4187  2007  2FF2               	dw	12274
  4188                           
  4189                           ;Config register CONFIG2 @ 0x2008
  4190                           ;	Brown-out Reset Selection bit
  4191                           ;	BOR4V = 0x1, unprogrammed default
  4192                           ;	Flash Program Memory Self Write Enable bits
  4193                           ;	WRT = OFF, Write protection off
  4194  2008                     	org	8200
  4195  2008  3FFF               	dw	16383

Data Sizes:
    Strings     165
    Constant    10
    Data        2
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      59
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[18]), STR_3(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@Cadena(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_15(CODE[9]), STR_14(CODE[14]), STR_13(CODE[8]), STR_12(CODE[10]), 
		 -> STR_11(CODE[10]), STR_10(CODE[9]), STR_9(CODE[6]), STR_8(CODE[8]), 
		 -> STR_7(CODE[10]), main@Cadena(BANK0[20]), STR_2(CODE[12]), STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    5508
                                             13 BANK0     24    24      0
                        _Apagar_Rojo
                       _Apagar_Verde
                            _Bloqueo
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _Leer_tecla
                       _Prender_Rojo
                      _Prender_Verde
                              _Sonar
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1538
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     548
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Sonar                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Prender_Verde                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Prender_Rojo                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Leer_tecla                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1408
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1520
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Bloqueo                                              3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Apagar_Verde                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Apagar_Rojo                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Apagar_Rojo
   _Apagar_Verde
   _Bloqueo
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Leer_tecla
   _Prender_Rojo
   _Prender_Verde
   _Sonar
   ___wmul
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     25      3B       5       73.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      49      12        0.0%
ABS                  0      0      49       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Jun 20 19:45:55 2022

                       _X 0053                         _x 0045                         pc 0002  
                      l20 00E9                        l21 00EF                        l22 00F0  
                      l23 00F6                        l31 00D5                        l40 02C2  
                      l25 00F7                        l17 00DF                        l18 00E2  
                      l19 00E8                        l43 0153                        l28 0FE2  
                      l37 0265                        l49 01CF                        l90 00C8  
                      l93 0FA3                        l96 0FA7                        l99 0F9F  
                      _XC 004F                        _XD 0051                        _XM 004D  
                      fsr 0004       ___wmul@multiplicand 0072                       l102 0FC8  
                     l105 0FFF                       l300 0104                       l302 011C  
                     l151 07E4                       l136 062E                       l171 0306  
                     l172 0317                       l181 0354                       l173 030F  
                     l182 0363                       l166 02DF                       l183 035B  
                     l167 02F0                       l176 032D                       l168 02E8  
                     l177 033E                       l186 0364                       l178 0336  
                     l296 044C                       l572 0213                       l582 018D  
                     _RC0 0038                       _RC1 0039                       _RC2 003A  
                     _RB4 0034                       _RB5 0035                       _RD2 0042  
                     _RB6 0036                       _RD3 0043                       _RD4 0044  
                     _RD5 0045                       _RD6 0046                       _RD7 0047  
                     u620 00DB                       u621 00DA                       u630 00E6  
                     u710 01FB                       u631 00E5                       u711 01FA  
                     u640 00ED                       u800 021A                       u641 00EC  
                     u801 0219                       u705 01EB                       u650 00F4  
                     u730 020F                       u651 00F3                       u731 020E  
                     u715 01F7                       u820 0243                       u900 0301  
                     u740 015A                       u821 0242                       u901 0300  
                     u725 0203                       u741 0159                       u910 030A  
                     u670 01D8                       u815 0222                       u911 0309  
                     u671 01D7                       u840 019B                       u920 0313  
                     u760 016C                       u665 012E                       u921 0312  
                     u761 016B                       u850 01BD                       u930 0328  
                     u690 01EA                       u770 0176                       u835 024B  
                     u931 0327                       u691 01E9                       u771 0175  
                     u755 015E                       u860 01CF                       u940 0331  
                     u861 01CE                       u941 0330                       u685 01DC  
                     u950 033A                       u870 02DA                       u790 0189  
                     u951 0339                       u871 02D9                       u791 0188  
                     u775 0172                       u960 034F                       u880 02E3  
                     u961 034E                       u881 02E2                       u785 017D  
                     u970 0358                       u890 02EC                       u971 0357  
                     u891 02EB                       u980 035F                       u981 035E  
                     u990 0373                       u991 0372                       _Try 0057  
                     fsr0 0004                       indf 0000                      l1300 0139  
                    l1310 014C                      l1302 013C                      l1312 0150  
                    l1304 0140                      l1400 01B3                      l1320 01DB  
                    l1306 0143                      l1402 00C5                      l1410 0FB0  
                    l1330 0201                      l1322 01E2                      l1314 01D0  
                    l1404 0FA0                      l1420 0FF3                      l1308 0149  
                    l1412 0FB3                      l1332 0202                      l1324 01E6  
                    l1316 01D2                      l1340 0154                      l1500 03EF  
                    l1430 02EC                      l1422 02C3                      l1406 0FA4  
                    l1414 0FBC                      l1334 0209                      l1326 01EA  
                    l1318 01D8                      l1350 016C                      l1342 015A  
                    l1502 03F4                      l1510 0436                      l1408 0F9C  
                    l1416 0FE3                      l1280 00ED                      l1440 0322  
                    l1432 02FB                      l1424 02D4                      l1520 00F8  
                    l1328 01FB                      l1336 020F                      l1352 0176  
                    l1344 015D                      l1504 0422                      l1512 0448  
                    l1600 0550                      l1418 0FE6                      l1282 00F4  
                    l1274 00D7                      l1290 0FD6                      l1362 00C9  
                    l1370 0230                      l1450 034F                      l1442 0328  
                    l1434 0301                      l1426 02DA                      l1530 0118  
                    l1522 00FA                      l1354 017C                      l1346 0164  
                    l1506 0429                      l1610 0592                      l1602 0558  
                    l1276 00DB                      l1292 0FDF                      l1284 0FCA  
                    l1380 0259                      l1372 0236                      l1364 0215  
                    l1452 0358                      l1444 0331                      l1436 030A  
                    l1428 02E3                      l1524 00FE                      l1356 0183  
                    l1348 0168                      l1508 042D                      l1460 036D  
                    l1700 076C                      l1620 05BD                      l1612 0597  
                    l1604 0561                      l1540 0451                      l1278 00E6  
                    l1286 0FCD                      l1390 0283                      l1382 025F  
                    l1366 021A                      l1374 023D                      l1294 011E  
                    l1454 035F                      l1446 033A                      l1438 0313  
                    l1526 010B                      l1358 0189                      l1470 0380  
                    l1462 0373                      l1710 0790                      l1702 0775  
                    l1630 0603                      l1622 05CB                      l1614 05A7  
                    l1606 056F                      l1550 045D                      l1542 0453  
                    l1288 0FD3                      l1392 0289                      l1384 0266  
                    l1376 0243                      l1368 022B                      l1296 0128  
                    l1448 0349                      l1528 0112                      l1480 03B1  
                    l1472 039D                      l1464 037A                      l1720 07DC  
                    l1712 0799                      l1704 0782                      l1632 0608  
                    l1616 05AC                      l1624 05E7                      l1608 058B  
                    l1560 048C                      l1552 0462                      l1544 0456  
                    l1386 026C                      l1378 0254                      l1298 012B  
                    l1394 018E                      l1482 03B6                      l1474 03A5  
                    l1466 037F                      l1458 0368                      l1714 07AF  
                    l1650 0658                      l1634 0610                      l1626 05EE  
                    l1618 05B4                      l1642 062E                      l1570 04B9  
                    l1562 0491                      l1554 046E                      l1546 0457  
                    l1538 044D                      l1388 0275                      l1396 0191  
                    l1492 03D4                      l1476 03A9                      l1716 07B8  
                    l1660 0683                      l1652 065D                      l1636 0619  
                    l1628 05F3                      l1580 04E0                      l1572 04C0  
                    l1644 0646                      l1564 04A0                      l1556 0477  
                    l1548 0458                      l1398 01AD                      l1494 03DE  
                    l1478 03AD                      l1742 0392                      l1670 06BD  
                    l1662 068C                      l1654 0662                      l1646 064F  
                    l1638 0627                      l1590 0529                      l1582 04F0  
                    l1574 04C7                      l1566 04A5                      l1718 07CD  
                    l1558 0483                      l1496 03E4                      l1488 03B8  
                    l1680 06F1                      l1672 06D2                      l1656 066E  
                    l1648 0653                      l1664 069C                      l1584 04F5  
                    l1576 04CD                      l1592 0530                      l1568 04B2  
                    l1498 03EB                      l1682 0707                      l1690 0733  
                    l1674 06E0                      l1666 06A3                      l1658 0677  
                    l1594 0536                      l1586 04FD                      l1578 04D2  
                    l1692 0744                      l1684 0710                      l1676 06E8  
                    l1668 06B4                      l1596 053B                      l1588 0506  
                    l1694 074D                      l1686 071E                      l1678 06EA  
                    l1598 054B                      l1696 075B                      l1688 0724  
                    l1698 0760                      STR_1 0086                      STR_2 0070  
                    STR_3 0051                      STR_4 001D                      STR_5 0040  
                    STR_6 002F                      STR_7 0086                      STR_8 00B4  
                    STR_9 00BC                      u1000 03AD                      u1001 03AC  
                    u1010 03D3                      u1011 03D2                      u1020 03DE  
                    u1100 04B9                      u1021 03DD                      u1101 04B8  
                    u1030 03E4                      u1110 04C0                      u1031 03E3  
                    u1015 03CF                      u1111 04BF                      u1040 0436  
                    u1200 0799                      u1120 04C7                      u1041 0435  
                    u1201 0798                      u1121 04C6                      u1050 0448  
                    u1210 07DC                      u1130 04CD                      u1051 0447  
                    u1211 07DB                      u1131 04CC                      u1060 00FE  
                    u1220 07E4                      u1140 0536                      u1061 00FD  
                    u1221 07E3                      u1141 0535                      u1150 0592  
                    u1215 07D8                      u1151 0591                      u1160 05EE  
                    u1161 05ED                      u1090 0118                      u1170 064F  
                    u1091 0117                      u1075 0105                      u1307 06DA  
                    u1171 064E                      u1180 06A3                      u1085 010C  
                    u1317 0718                      u1181 06A2                      u1237 0499  
                    u1190 06F1                      u1407 0344                      u1327 072C  
                    u1191 06F0                      u1247 04DA                      u1417 013E  
                    u1337 0755                      u1257 050E                      u1427 014E  
                    u1347 078A                      u1267 0569                      u1437 0270  
                    u1357 0FB7                      u1277 05C5                      u1447 027F  
                    u1367 0FC3                      u1287 0621                      u1457 028D  
                    u1377 02CF                      u1297 0694                      u1467 0FDA  
                    u1387 02F6                      u1477 0FEC                      u1397 031D  
                    u1487 0FFA                      _True 0055         ?_Lcd_Write_String 0075  
                    _main 044D                      btemp 007E                      start 0000  
      ??_Lcd_Write_String 0077           __end_of_Lcd_Cmd 0FE3           __end_of_Bloqueo 1000  
                   ?_main 0070                     STR_10 009A                     STR_11 007C  
                   STR_12 0090                     STR_13 00AC                     STR_14 0062  
                   STR_15 00A3           __end_of___lwdiv 0214           __end_of___lwmod 018E  
                   _PORTB 0006                     _PORTC 0007                     _PORTD 0008  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   _Clave 004B                     _Tecla 0049                     _Sonar 0FB0  
         __end_of_dpowers 001D               _Apagar_Rojo 0F9C                     pclath 000A  
                   status 0003                     wtemp0 007E           __end_of_sprintf 044D  
              _Leer_tecla 02C3          __end_of_Lcd_Init 02C3          __end_of_Lcd_Port 00F8  
         __initialization 07E7              __end_of_main 07E7                    ??_main 002D  
                  ?_Sonar 0070     __end_of_Prender_Verde 00C9                 ??_Lcd_Cmd 0071  
               ??_Bloqueo 0070                    ___wmul 00F8                 ??___lwdiv 0074  
               ??___lwmod 007C              _Apagar_Verde 0FA0                 ??_sprintf 0023  
         Lcd_Set_Cursor@a 0077           Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0079  
         Lcd_Set_Cursor@z 0078   __end_of__initialization 07FC               ?_Leer_tecla 0070  
       __end_of_Lcd_Clear 00D6            __pcstackCOMMON 0070             __end_of_Sonar 0FC9  
            __pidataBANK0 00C3            _Lcd_Set_Cursor 0214                   ??_Sonar 0070  
               ?_Lcd_Init 0070                 ?_Lcd_Port 0070                __pbssBANK0 0045  
              __pmaintext 044D                   ?___wmul 0070    __end_of_Lcd_Set_Cursor 0266  
           ?_Prender_Rojo 0070                ??_Lcd_Init 0074                ??_Lcd_Port 0070  
            ?_Apagar_Rojo 0070                __stringtab 0003                   _Bandera 0047  
          _Lcd_Write_Char 011D                   _Lcd_Cmd 0FC9                   _Bloqueo 0FE3  
                 ___lwdiv 01D0                   ___lwmod 0154            ??_Prender_Rojo 0070  
         ?_Lcd_Set_Cursor 0074                   __ptext1 0365                   __ptext2 0154  
                 __ptext3 01D0                   __ptext4 00F8                   __ptext5 0FB0  
                 __ptext6 00C5                   __ptext7 0FA4                   __ptext8 02C3  
                 __ptext9 018E                   _dpowers 0013                   _sprintf 0365  
                 clrloop0 0FA9    __end_of_Lcd_Write_Char 0154      end_of_initialization 07FC  
               Lcd_Port@a 0070                main@Cadena 0031           ?_Lcd_Write_Char 0070  
       Lcd_Write_String@a 0075         Lcd_Write_String@i 007A              ??_Leer_tecla 0070  
               _Lcd_Clear 00C9            __end_of___wmul 011D          _Lcd_Write_String 018E  
      __end_of_Leer_tecla 0365       start_initialization 07E7      __end_of_Prender_Rojo 0FA8  
              ?_Lcd_Clear 0070                  ??___wmul 0074               __pdataBANK0 0059  
         Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073                 ___latbits 0002  
           __pcstackBANK0 0020             _Prender_Verde 00C5                  ?_Lcd_Cmd 0070  
             sprintf@flag 0027                  ?_Bloqueo 0070               sprintf@prec 0028  
        ___lwdiv@dividend 0072          ??_Lcd_Set_Cursor 0075                  ?___lwdiv 0070  
                ?___lwmod 0078                 __pstrings 0003            ?_Prender_Verde 0070  
        ___lwdiv@quotient 0075                  ?_sprintf 0020            ___wmul@product 0074  
               clear_ram0 0FA8                  Lcd_Cmd@a 0073               ??_Lcd_Clear 0074  
           ?_Apagar_Verde 0070               __stringbase 0012         ___wmul@multiplier 0070  
        ??_Lcd_Write_Char 0071                  _Lcd_Init 0266                  _Lcd_Port 00D6  
__end_of_Lcd_Write_String 01D0                  _Password 0059            ??_Apagar_Verde 0070  
      __end_of__stringtab 0013              _Prender_Rojo 0FA4                sprintf@val 0029  
         ??_Prender_Verde 0070           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 011D                  __ptext11 0214                  __ptext12 0266  
                __ptext13 00C9                  __ptext14 0FC9                  __ptext15 00D6  
                __ptext16 0FE3                  __ptext17 0FA0                  __ptext18 0F9C  
           ??_Apagar_Rojo 0070        Lcd_Write_Char@temp 0072                 sprintf@ap 0026  
               sprintf@sp 002B          ___lwmod@dividend 007A                 stringcode 000D  
      Lcd_Set_Cursor@temp 007A                  sprintf@c 002C                  sprintf@f 0020  
         ___lwmod@divisor 0078           ___lwmod@counter 007D                  stringdir 000D  
                stringtab 0003      __end_of_Apagar_Verde 0FA4       __end_of_Apagar_Rojo 0FA0  
